// Package gen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package gen

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

// AppConnection defines model for AppConnection.
type AppConnection struct {
	CloudConnection     CloudConnection     `json:"cloudConnection"`
	EspSerialConnection ESPSerialConnection `json:"espSerialConnection"`
	PicSerialConnection PICSerialConnection `json:"picSerialConnection"`
	RfidUsbConnection   RFIDUSBConnection   `json:"rfidUsbConnection"`
}

// BatteryState defines model for BatteryState.
type BatteryState struct {
	// Current The current of the battery
	Current uint16 `json:"current"`

	// Temp The temperature of the battery
	Temp uint8 `json:"temp"`

	// Voltage The voltage of the battery
	Voltage uint16 `json:"voltage"`

	// CellVoltages The cell voltages of the battery
	CellVoltages []uint16 `json:"cellVoltages"`

	// Percent The percentage of the battery
	Percent uint8 `json:"percent"`

	// Fault The fault of the battery
	Fault uint8 `json:"fault"`

	// Health The health of the battery
	Health uint8 `json:"health"`

	// UpdatedAt The updated at time of the battery
	UpdatedAt time.Time `json:"updatedAt"`
}

// CargoDoorMotorState defines model for CargoDoorMotorState.
type CargoDoorMotorState struct {
	// Direction The direction of the cargo door motor
	Direction string `json:"direction"`

	// Speed The speed of the cargo door motor
	Speed uint8 `json:"speed"`

	// IsRunning Whether the cargo door motor is running
	IsRunning bool `json:"isRunning"`

	// Enabled Whether the cargo door motor is enabled
	Enabled bool `json:"enabled"`

	// UpdatedAt The updated at time of the cargo door motor
	UpdatedAt time.Time `json:"updatedAt"`
}

// CargoState defines model for CargoState.
type CargoState struct {
	// IsOpen Whether the cargo is open
	IsOpen bool `json:"isOpen"`

	// QrCode The QR code read from the cargo QR scanner
	QrCode string `json:"qrCode"`

	// BottomDistance The bottom distance of the cargo
	BottomDistance uint16 `json:"bottomDistance"`

	// UpdatedAt The updated at time of the cargo
	UpdatedAt time.Time `json:"updatedAt"`
}

// ChargeState defines model for ChargeState.
type ChargeState struct {
	// CurrentLimit The current limit of the charge
	CurrentLimit uint16 `json:"currentLimit"`

	// Enabled Whether the charge is enabled
	Enabled bool `json:"enabled"`

	// UpdatedAt The updated at time of the charge
	UpdatedAt time.Time `json:"updatedAt"`
}

// CloudConfig defines model for CloudConfig.
type CloudConfig struct {
	// Address The address for the cloud service
	Address string `json:"address"`

	// Token The token for the cloud service
	Token string `json:"token"`
}

// CloudConnection defines model for CloudConnection.
type CloudConnection struct {
	Connected       bool       `json:"connected"`
	LastConnectedAt *time.Time `json:"lastConnectedAt"`

	// Uptime The uptime of the cloud connection in seconds
	Uptime float32 `json:"uptime"`
	Error  *string `json:"error"`
}

// DischargeState defines model for DischargeState.
type DischargeState struct {
	// CurrentLimit The current limit of the discharge
	CurrentLimit uint16 `json:"currentLimit"`

	// Enabled Whether the discharge is enabled
	Enabled bool `json:"enabled"`

	// UpdatedAt The updated at time of the discharge
	UpdatedAt time.Time `json:"updatedAt"`
}

// DistanceSensorState defines model for DistanceSensorState.
type DistanceSensorState struct {
	// FrontDistance The front distance of the distance sensor
	FrontDistance uint16 `json:"frontDistance"`

	// BackDistance The back distance of the distance sensor
	BackDistance uint16 `json:"backDistance"`

	// DownDistance The down distance of the distance sensor
	DownDistance uint16 `json:"downDistance"`

	// UpdatedAt The updated at time of the distance sensor
	UpdatedAt time.Time `json:"updatedAt"`
}

// DriveMotorState defines model for DriveMotorState.
type DriveMotorState struct {
	// Direction The direction of the drive motor
	Direction string `json:"direction"`

	// Speed The speed of the drive motor (0-100)
	Speed uint8 `json:"speed"`

	// IsRunning Whether the drive motor is running
	IsRunning bool `json:"isRunning"`

	// Enabled Whether the drive motor is enabled
	Enabled bool `json:"enabled"`

	// UpdatedAt The updated at time of the drive motor
	UpdatedAt time.Time `json:"updatedAt"`
}

// ESPConfig defines model for ESPConfig.
type ESPConfig struct {
	Serial SerialConfig `json:"serial"`
}

// ESPSerialConnection defines model for ESPSerialConnection.
type ESPSerialConnection struct {
	Connected       bool       `json:"connected"`
	LastConnectedAt *time.Time `json:"lastConnectedAt"`
	Error           *string    `json:"error"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	// Code custom raybot error code
	Code string `json:"code"`

	// Message custom raybot error message
	Message string        `json:"message"`
	Details *[]FieldError `json:"details,omitempty"`
}

// FieldError defines model for FieldError.
type FieldError struct {
	// Field field name
	Field string `json:"field"`

	// Message error message
	Message string `json:"message"`
}

// GRPCConfig defines model for GRPCConfig.
type GRPCConfig struct {
	// Port The port for the gRPC server
	Port int `json:"port"`

	// Enable Whether to enable the gRPC server
	Enable bool `json:"enable"`
}

// HTTPConfig defines model for HTTPConfig.
type HTTPConfig struct {
	// Port The port for the HTTP server
	Port int `json:"port"`

	// Swagger Whether to enable the Swagger UI
	Swagger bool `json:"swagger"`
}

// HardwareConfig defines model for HardwareConfig.
type HardwareConfig struct {
	Esp ESPConfig `json:"esp"`
	Pic PICConfig `json:"pic"`
}

// LiftMotorState defines model for LiftMotorState.
type LiftMotorState struct {
	// CurrentPosition The current position of the lift motor
	CurrentPosition uint16 `json:"currentPosition"`

	// TargetPosition The target position of the lift motor
	TargetPosition uint16 `json:"targetPosition"`

	// IsRunning Whether the lift motor is running
	IsRunning bool `json:"isRunning"`

	// Enabled Whether the lift motor is enabled
	Enabled bool `json:"enabled"`

	// UpdatedAt The updated at time of the lift motor
	UpdatedAt time.Time `json:"updatedAt"`
}

// LocationState defines model for LocationState.
type LocationState struct {
	// CurrentLocation The current location of the robot
	CurrentLocation string `json:"currentLocation"`

	// UpdatedAt The updated at time of the location
	UpdatedAt time.Time `json:"updatedAt"`
}

// LogConfig defines model for LogConfig.
type LogConfig struct {
	// Level The global log level for the application
	Level string `json:"level"`

	// Format The log format for the application
	Format string `json:"format"`

	// AddSource Whether to add the source to the log
	AddSource bool `json:"addSource"`
}

// PICConfig defines model for PICConfig.
type PICConfig struct {
	Serial SerialConfig `json:"serial"`
}

// PICSerialConnection defines model for PICSerialConnection.
type PICSerialConnection struct {
	Connected       bool       `json:"connected"`
	LastConnectedAt *time.Time `json:"lastConnectedAt"`
	Error           *string    `json:"error"`
}

// RFIDUSBConnection defines model for RFIDUSBConnection.
type RFIDUSBConnection struct {
	Connected       bool       `json:"connected"`
	LastConnectedAt *time.Time `json:"lastConnectedAt"`
	Error           *string    `json:"error"`
}

// RobotStateResponse defines model for RobotStateResponse.
type RobotStateResponse struct {
	Battery        BatteryState        `json:"battery"`
	Charge         ChargeState         `json:"charge"`
	Discharge      DischargeState      `json:"discharge"`
	DistanceSensor DistanceSensorState `json:"distanceSensor"`
	LiftMotor      LiftMotorState      `json:"liftMotor"`
	DriveMotor     DriveMotorState     `json:"driveMotor"`
	Location       LocationState       `json:"location"`
	Cargo          CargoState          `json:"cargo"`
	CargoDoorMotor CargoDoorMotorState `json:"cargoDoorMotor"`
	AppConnection  AppConnection       `json:"appConnection"`
}

// SerialConfig defines model for SerialConfig.
type SerialConfig struct {
	// Port The port name for the serial connection
	Port string `json:"port"`

	// BaudRate The baud rate for the serial connection
	BaudRate int `json:"baudRate"`

	// DataBits The data bits for the serial connection
	DataBits int `json:"dataBits"`

	// StopBits The stop bits for the serial connection
	StopBits float64 `json:"stopBits"`

	// Parity The parity for the serial connection
	Parity string `json:"parity"`

	// ReadTimeout The read timeout for the serial connection in seconds
	ReadTimeout int `json:"readTimeout"`
}

// UpdateCloudConfigJSONRequestBody defines body for UpdateCloudConfig for application/json ContentType.
type UpdateCloudConfigJSONRequestBody = CloudConfig

// UpdateGRPCConfigJSONRequestBody defines body for UpdateGRPCConfig for application/json ContentType.
type UpdateGRPCConfigJSONRequestBody = GRPCConfig

// UpdateHardwareConfigJSONRequestBody defines body for UpdateHardwareConfig for application/json ContentType.
type UpdateHardwareConfigJSONRequestBody = HardwareConfig

// UpdateHTTPConfigJSONRequestBody defines body for UpdateHTTPConfig for application/json ContentType.
type UpdateHTTPConfigJSONRequestBody = HTTPConfig

// UpdateLogConfigJSONRequestBody defines body for UpdateLogConfig for application/json ContentType.
type UpdateLogConfigJSONRequestBody = LogConfig

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get the cloud configuration
	// (GET /configs/cloud)
	GetCloudConfig(w http.ResponseWriter, r *http.Request)
	// Update the cloud configuration
	// (PUT /configs/cloud)
	UpdateCloudConfig(w http.ResponseWriter, r *http.Request)
	// Get the gRPC configuration
	// (GET /configs/grpc)
	GetGRPCConfig(w http.ResponseWriter, r *http.Request)
	// Update the gRPC configuration
	// (PUT /configs/grpc)
	UpdateGRPCConfig(w http.ResponseWriter, r *http.Request)
	// Get the hardware configuration
	// (GET /configs/hardware)
	GetHardwareConfig(w http.ResponseWriter, r *http.Request)
	// Update the hardware configuration
	// (PUT /configs/hardware)
	UpdateHardwareConfig(w http.ResponseWriter, r *http.Request)
	// Get the HTTP configuration
	// (GET /configs/http)
	GetHTTPConfig(w http.ResponseWriter, r *http.Request)
	// Update the HTTP configuration
	// (PUT /configs/http)
	UpdateHTTPConfig(w http.ResponseWriter, r *http.Request)
	// Get the log configuration
	// (GET /configs/log)
	GetLogConfig(w http.ResponseWriter, r *http.Request)
	// Update the log configuration
	// (PUT /configs/log)
	UpdateLogConfig(w http.ResponseWriter, r *http.Request)
	// Get robot state
	// (GET /robot-state)
	GetRobotState(w http.ResponseWriter, r *http.Request)
	// Restart the application
	// (POST /system/restart)
	RestartApplication(w http.ResponseWriter, r *http.Request)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Get the cloud configuration
// (GET /configs/cloud)
func (_ Unimplemented) GetCloudConfig(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update the cloud configuration
// (PUT /configs/cloud)
func (_ Unimplemented) UpdateCloudConfig(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get the gRPC configuration
// (GET /configs/grpc)
func (_ Unimplemented) GetGRPCConfig(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update the gRPC configuration
// (PUT /configs/grpc)
func (_ Unimplemented) UpdateGRPCConfig(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get the hardware configuration
// (GET /configs/hardware)
func (_ Unimplemented) GetHardwareConfig(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update the hardware configuration
// (PUT /configs/hardware)
func (_ Unimplemented) UpdateHardwareConfig(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get the HTTP configuration
// (GET /configs/http)
func (_ Unimplemented) GetHTTPConfig(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update the HTTP configuration
// (PUT /configs/http)
func (_ Unimplemented) UpdateHTTPConfig(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get the log configuration
// (GET /configs/log)
func (_ Unimplemented) GetLogConfig(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update the log configuration
// (PUT /configs/log)
func (_ Unimplemented) UpdateLogConfig(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get robot state
// (GET /robot-state)
func (_ Unimplemented) GetRobotState(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Restart the application
// (POST /system/restart)
func (_ Unimplemented) RestartApplication(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetCloudConfig operation middleware
func (siw *ServerInterfaceWrapper) GetCloudConfig(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCloudConfig(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateCloudConfig operation middleware
func (siw *ServerInterfaceWrapper) UpdateCloudConfig(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateCloudConfig(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetGRPCConfig operation middleware
func (siw *ServerInterfaceWrapper) GetGRPCConfig(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetGRPCConfig(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateGRPCConfig operation middleware
func (siw *ServerInterfaceWrapper) UpdateGRPCConfig(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateGRPCConfig(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetHardwareConfig operation middleware
func (siw *ServerInterfaceWrapper) GetHardwareConfig(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetHardwareConfig(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateHardwareConfig operation middleware
func (siw *ServerInterfaceWrapper) UpdateHardwareConfig(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateHardwareConfig(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetHTTPConfig operation middleware
func (siw *ServerInterfaceWrapper) GetHTTPConfig(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetHTTPConfig(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateHTTPConfig operation middleware
func (siw *ServerInterfaceWrapper) UpdateHTTPConfig(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateHTTPConfig(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetLogConfig operation middleware
func (siw *ServerInterfaceWrapper) GetLogConfig(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetLogConfig(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateLogConfig operation middleware
func (siw *ServerInterfaceWrapper) UpdateLogConfig(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateLogConfig(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetRobotState operation middleware
func (siw *ServerInterfaceWrapper) GetRobotState(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetRobotState(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// RestartApplication operation middleware
func (siw *ServerInterfaceWrapper) RestartApplication(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RestartApplication(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/configs/cloud", wrapper.GetCloudConfig)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/configs/cloud", wrapper.UpdateCloudConfig)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/configs/grpc", wrapper.GetGRPCConfig)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/configs/grpc", wrapper.UpdateGRPCConfig)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/configs/hardware", wrapper.GetHardwareConfig)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/configs/hardware", wrapper.UpdateHardwareConfig)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/configs/http", wrapper.GetHTTPConfig)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/configs/http", wrapper.UpdateHTTPConfig)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/configs/log", wrapper.GetLogConfig)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/configs/log", wrapper.UpdateLogConfig)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/robot-state", wrapper.GetRobotState)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/system/restart", wrapper.RestartApplication)
	})

	return r
}

type GetCloudConfigRequestObject struct {
}

type GetCloudConfigResponseObject interface {
	VisitGetCloudConfigResponse(w http.ResponseWriter) error
}

type GetCloudConfig200JSONResponse CloudConfig

func (response GetCloudConfig200JSONResponse) VisitGetCloudConfigResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetCloudConfig400JSONResponse ErrorResponse

func (response GetCloudConfig400JSONResponse) VisitGetCloudConfigResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdateCloudConfigRequestObject struct {
	Body *UpdateCloudConfigJSONRequestBody
}

type UpdateCloudConfigResponseObject interface {
	VisitUpdateCloudConfigResponse(w http.ResponseWriter) error
}

type UpdateCloudConfig200JSONResponse CloudConfig

func (response UpdateCloudConfig200JSONResponse) VisitUpdateCloudConfigResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateCloudConfig400JSONResponse ErrorResponse

func (response UpdateCloudConfig400JSONResponse) VisitUpdateCloudConfigResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetGRPCConfigRequestObject struct {
}

type GetGRPCConfigResponseObject interface {
	VisitGetGRPCConfigResponse(w http.ResponseWriter) error
}

type GetGRPCConfig200JSONResponse GRPCConfig

func (response GetGRPCConfig200JSONResponse) VisitGetGRPCConfigResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetGRPCConfig400JSONResponse ErrorResponse

func (response GetGRPCConfig400JSONResponse) VisitGetGRPCConfigResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdateGRPCConfigRequestObject struct {
	Body *UpdateGRPCConfigJSONRequestBody
}

type UpdateGRPCConfigResponseObject interface {
	VisitUpdateGRPCConfigResponse(w http.ResponseWriter) error
}

type UpdateGRPCConfig200JSONResponse GRPCConfig

func (response UpdateGRPCConfig200JSONResponse) VisitUpdateGRPCConfigResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateGRPCConfig400JSONResponse ErrorResponse

func (response UpdateGRPCConfig400JSONResponse) VisitUpdateGRPCConfigResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetHardwareConfigRequestObject struct {
}

type GetHardwareConfigResponseObject interface {
	VisitGetHardwareConfigResponse(w http.ResponseWriter) error
}

type GetHardwareConfig200JSONResponse HardwareConfig

func (response GetHardwareConfig200JSONResponse) VisitGetHardwareConfigResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetHardwareConfig400JSONResponse ErrorResponse

func (response GetHardwareConfig400JSONResponse) VisitGetHardwareConfigResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdateHardwareConfigRequestObject struct {
	Body *UpdateHardwareConfigJSONRequestBody
}

type UpdateHardwareConfigResponseObject interface {
	VisitUpdateHardwareConfigResponse(w http.ResponseWriter) error
}

type UpdateHardwareConfig200JSONResponse HardwareConfig

func (response UpdateHardwareConfig200JSONResponse) VisitUpdateHardwareConfigResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateHardwareConfig400JSONResponse ErrorResponse

func (response UpdateHardwareConfig400JSONResponse) VisitUpdateHardwareConfigResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetHTTPConfigRequestObject struct {
}

type GetHTTPConfigResponseObject interface {
	VisitGetHTTPConfigResponse(w http.ResponseWriter) error
}

type GetHTTPConfig200JSONResponse HTTPConfig

func (response GetHTTPConfig200JSONResponse) VisitGetHTTPConfigResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetHTTPConfig400JSONResponse ErrorResponse

func (response GetHTTPConfig400JSONResponse) VisitGetHTTPConfigResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdateHTTPConfigRequestObject struct {
	Body *UpdateHTTPConfigJSONRequestBody
}

type UpdateHTTPConfigResponseObject interface {
	VisitUpdateHTTPConfigResponse(w http.ResponseWriter) error
}

type UpdateHTTPConfig200JSONResponse HTTPConfig

func (response UpdateHTTPConfig200JSONResponse) VisitUpdateHTTPConfigResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateHTTPConfig400JSONResponse ErrorResponse

func (response UpdateHTTPConfig400JSONResponse) VisitUpdateHTTPConfigResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetLogConfigRequestObject struct {
}

type GetLogConfigResponseObject interface {
	VisitGetLogConfigResponse(w http.ResponseWriter) error
}

type GetLogConfig200JSONResponse LogConfig

func (response GetLogConfig200JSONResponse) VisitGetLogConfigResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetLogConfig400JSONResponse ErrorResponse

func (response GetLogConfig400JSONResponse) VisitGetLogConfigResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdateLogConfigRequestObject struct {
	Body *UpdateLogConfigJSONRequestBody
}

type UpdateLogConfigResponseObject interface {
	VisitUpdateLogConfigResponse(w http.ResponseWriter) error
}

type UpdateLogConfig200JSONResponse LogConfig

func (response UpdateLogConfig200JSONResponse) VisitUpdateLogConfigResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateLogConfig400JSONResponse ErrorResponse

func (response UpdateLogConfig400JSONResponse) VisitUpdateLogConfigResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetRobotStateRequestObject struct {
}

type GetRobotStateResponseObject interface {
	VisitGetRobotStateResponse(w http.ResponseWriter) error
}

type GetRobotState200JSONResponse RobotStateResponse

func (response GetRobotState200JSONResponse) VisitGetRobotStateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetRobotState400JSONResponse ErrorResponse

func (response GetRobotState400JSONResponse) VisitGetRobotStateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type RestartApplicationRequestObject struct {
}

type RestartApplicationResponseObject interface {
	VisitRestartApplicationResponse(w http.ResponseWriter) error
}

type RestartApplication204Response struct {
}

func (response RestartApplication204Response) VisitRestartApplicationResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type RestartApplication400JSONResponse ErrorResponse

func (response RestartApplication400JSONResponse) VisitRestartApplicationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Get the cloud configuration
	// (GET /configs/cloud)
	GetCloudConfig(ctx context.Context, request GetCloudConfigRequestObject) (GetCloudConfigResponseObject, error)
	// Update the cloud configuration
	// (PUT /configs/cloud)
	UpdateCloudConfig(ctx context.Context, request UpdateCloudConfigRequestObject) (UpdateCloudConfigResponseObject, error)
	// Get the gRPC configuration
	// (GET /configs/grpc)
	GetGRPCConfig(ctx context.Context, request GetGRPCConfigRequestObject) (GetGRPCConfigResponseObject, error)
	// Update the gRPC configuration
	// (PUT /configs/grpc)
	UpdateGRPCConfig(ctx context.Context, request UpdateGRPCConfigRequestObject) (UpdateGRPCConfigResponseObject, error)
	// Get the hardware configuration
	// (GET /configs/hardware)
	GetHardwareConfig(ctx context.Context, request GetHardwareConfigRequestObject) (GetHardwareConfigResponseObject, error)
	// Update the hardware configuration
	// (PUT /configs/hardware)
	UpdateHardwareConfig(ctx context.Context, request UpdateHardwareConfigRequestObject) (UpdateHardwareConfigResponseObject, error)
	// Get the HTTP configuration
	// (GET /configs/http)
	GetHTTPConfig(ctx context.Context, request GetHTTPConfigRequestObject) (GetHTTPConfigResponseObject, error)
	// Update the HTTP configuration
	// (PUT /configs/http)
	UpdateHTTPConfig(ctx context.Context, request UpdateHTTPConfigRequestObject) (UpdateHTTPConfigResponseObject, error)
	// Get the log configuration
	// (GET /configs/log)
	GetLogConfig(ctx context.Context, request GetLogConfigRequestObject) (GetLogConfigResponseObject, error)
	// Update the log configuration
	// (PUT /configs/log)
	UpdateLogConfig(ctx context.Context, request UpdateLogConfigRequestObject) (UpdateLogConfigResponseObject, error)
	// Get robot state
	// (GET /robot-state)
	GetRobotState(ctx context.Context, request GetRobotStateRequestObject) (GetRobotStateResponseObject, error)
	// Restart the application
	// (POST /system/restart)
	RestartApplication(ctx context.Context, request RestartApplicationRequestObject) (RestartApplicationResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// GetCloudConfig operation middleware
func (sh *strictHandler) GetCloudConfig(w http.ResponseWriter, r *http.Request) {
	var request GetCloudConfigRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetCloudConfig(ctx, request.(GetCloudConfigRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCloudConfig")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetCloudConfigResponseObject); ok {
		if err := validResponse.VisitGetCloudConfigResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateCloudConfig operation middleware
func (sh *strictHandler) UpdateCloudConfig(w http.ResponseWriter, r *http.Request) {
	var request UpdateCloudConfigRequestObject

	var body UpdateCloudConfigJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateCloudConfig(ctx, request.(UpdateCloudConfigRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateCloudConfig")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateCloudConfigResponseObject); ok {
		if err := validResponse.VisitUpdateCloudConfigResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetGRPCConfig operation middleware
func (sh *strictHandler) GetGRPCConfig(w http.ResponseWriter, r *http.Request) {
	var request GetGRPCConfigRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetGRPCConfig(ctx, request.(GetGRPCConfigRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetGRPCConfig")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetGRPCConfigResponseObject); ok {
		if err := validResponse.VisitGetGRPCConfigResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateGRPCConfig operation middleware
func (sh *strictHandler) UpdateGRPCConfig(w http.ResponseWriter, r *http.Request) {
	var request UpdateGRPCConfigRequestObject

	var body UpdateGRPCConfigJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateGRPCConfig(ctx, request.(UpdateGRPCConfigRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateGRPCConfig")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateGRPCConfigResponseObject); ok {
		if err := validResponse.VisitUpdateGRPCConfigResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetHardwareConfig operation middleware
func (sh *strictHandler) GetHardwareConfig(w http.ResponseWriter, r *http.Request) {
	var request GetHardwareConfigRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetHardwareConfig(ctx, request.(GetHardwareConfigRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetHardwareConfig")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetHardwareConfigResponseObject); ok {
		if err := validResponse.VisitGetHardwareConfigResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateHardwareConfig operation middleware
func (sh *strictHandler) UpdateHardwareConfig(w http.ResponseWriter, r *http.Request) {
	var request UpdateHardwareConfigRequestObject

	var body UpdateHardwareConfigJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateHardwareConfig(ctx, request.(UpdateHardwareConfigRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateHardwareConfig")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateHardwareConfigResponseObject); ok {
		if err := validResponse.VisitUpdateHardwareConfigResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetHTTPConfig operation middleware
func (sh *strictHandler) GetHTTPConfig(w http.ResponseWriter, r *http.Request) {
	var request GetHTTPConfigRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetHTTPConfig(ctx, request.(GetHTTPConfigRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetHTTPConfig")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetHTTPConfigResponseObject); ok {
		if err := validResponse.VisitGetHTTPConfigResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateHTTPConfig operation middleware
func (sh *strictHandler) UpdateHTTPConfig(w http.ResponseWriter, r *http.Request) {
	var request UpdateHTTPConfigRequestObject

	var body UpdateHTTPConfigJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateHTTPConfig(ctx, request.(UpdateHTTPConfigRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateHTTPConfig")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateHTTPConfigResponseObject); ok {
		if err := validResponse.VisitUpdateHTTPConfigResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetLogConfig operation middleware
func (sh *strictHandler) GetLogConfig(w http.ResponseWriter, r *http.Request) {
	var request GetLogConfigRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetLogConfig(ctx, request.(GetLogConfigRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetLogConfig")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetLogConfigResponseObject); ok {
		if err := validResponse.VisitGetLogConfigResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateLogConfig operation middleware
func (sh *strictHandler) UpdateLogConfig(w http.ResponseWriter, r *http.Request) {
	var request UpdateLogConfigRequestObject

	var body UpdateLogConfigJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateLogConfig(ctx, request.(UpdateLogConfigRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateLogConfig")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateLogConfigResponseObject); ok {
		if err := validResponse.VisitUpdateLogConfigResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetRobotState operation middleware
func (sh *strictHandler) GetRobotState(w http.ResponseWriter, r *http.Request) {
	var request GetRobotStateRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetRobotState(ctx, request.(GetRobotStateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetRobotState")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetRobotStateResponseObject); ok {
		if err := validResponse.VisitGetRobotStateResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// RestartApplication operation middleware
func (sh *strictHandler) RestartApplication(w http.ResponseWriter, r *http.Request) {
	var request RestartApplicationRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.RestartApplication(ctx, request.(RestartApplicationRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RestartApplication")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(RestartApplicationResponseObject); ok {
		if err := validResponse.VisitRestartApplicationResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
