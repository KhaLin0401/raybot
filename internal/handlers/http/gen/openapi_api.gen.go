// Package gen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package gen

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

// APConfig defines model for APConfig.
type APConfig struct {
	// Enable Whether to enable the AP mode
	Enable bool `json:"enable"`

	// Ssid The SSID for the AP mode
	Ssid string `json:"ssid"`

	// Password The password for the AP mode
	Password string `json:"password"`

	// Ip The IP address for the AP mode
	Ip string `json:"ip"`
}

// AppConnection defines model for AppConnection.
type AppConnection struct {
	CloudConnection     CloudConnection     `json:"cloudConnection"`
	EspSerialConnection ESPSerialConnection `json:"espSerialConnection"`
	PicSerialConnection PICSerialConnection `json:"picSerialConnection"`
	RfidUsbConnection   RFIDUSBConnection   `json:"rfidUsbConnection"`
}

// BatteryState defines model for BatteryState.
type BatteryState struct {
	// Current The current of the battery
	Current uint16 `json:"current"`

	// Temp The temperature of the battery
	Temp uint8 `json:"temp"`

	// Voltage The voltage of the battery
	Voltage uint16 `json:"voltage"`

	// CellVoltages The cell voltages of the battery
	CellVoltages []uint16 `json:"cellVoltages"`

	// Percent The percentage of the battery
	Percent uint8 `json:"percent"`

	// Fault The fault of the battery
	Fault uint8 `json:"fault"`

	// Health The health of the battery
	Health uint8 `json:"health"`

	// UpdatedAt The updated at time of the battery
	UpdatedAt time.Time `json:"updatedAt"`
}

// CargoCheckQRInputs defines model for CargoCheckQRInputs.
type CargoCheckQRInputs struct {
	// QrCode The QR code to check
	QrCode string `json:"qrCode"`
}

// CargoCloseInputs defines model for CargoCloseInputs.
type CargoCloseInputs = map[string]interface{}

// CargoConfig defines model for CargoConfig.
type CargoConfig struct {
	// LiftPosition The lift position for the cargo, must be less than lowerPosition
	LiftPosition int `json:"liftPosition"`

	// LowerPosition The lower position for the cargo
	LowerPosition int `json:"lowerPosition"`
}

// CargoDoorMotorState defines model for CargoDoorMotorState.
type CargoDoorMotorState struct {
	// Direction The direction of the cargo door motor
	Direction string `json:"direction"`

	// Speed The speed of the cargo door motor
	Speed uint8 `json:"speed"`

	// IsRunning Whether the cargo door motor is running
	IsRunning bool `json:"isRunning"`

	// Enabled Whether the cargo door motor is enabled
	Enabled bool `json:"enabled"`

	// UpdatedAt The updated at time of the cargo door motor
	UpdatedAt time.Time `json:"updatedAt"`
}

// CargoLiftInputs defines model for CargoLiftInputs.
type CargoLiftInputs = map[string]interface{}

// CargoLowerInputs defines model for CargoLowerInputs.
type CargoLowerInputs = map[string]interface{}

// CargoOpenInputs defines model for CargoOpenInputs.
type CargoOpenInputs = map[string]interface{}

// CargoState defines model for CargoState.
type CargoState struct {
	// IsOpen Whether the cargo is open
	IsOpen bool `json:"isOpen"`

	// QrCode The QR code read from the cargo QR scanner
	QrCode string `json:"qrCode"`

	// BottomDistance The bottom distance of the cargo
	BottomDistance uint16 `json:"bottomDistance"`

	// UpdatedAt The updated at time of the cargo
	UpdatedAt time.Time `json:"updatedAt"`
}

// ChargeState defines model for ChargeState.
type ChargeState struct {
	// CurrentLimit The current limit of the charge
	CurrentLimit uint16 `json:"currentLimit"`

	// Enabled Whether the charge is enabled
	Enabled bool `json:"enabled"`

	// UpdatedAt The updated at time of the charge
	UpdatedAt time.Time `json:"updatedAt"`
}

// CloudConfig defines model for CloudConfig.
type CloudConfig struct {
	// Address The address for the cloud service
	Address string `json:"address"`

	// Token The token for the cloud service
	Token string `json:"token"`
}

// CloudConnection defines model for CloudConnection.
type CloudConnection struct {
	Connected       bool       `json:"connected"`
	LastConnectedAt *time.Time `json:"lastConnectedAt"`

	// Uptime The uptime of the cloud connection in seconds
	Uptime float32 `json:"uptime"`
	Error  *string `json:"error"`
}

// CommandInputs defines model for CommandInputs.
type CommandInputs struct {
	union json.RawMessage
}

// CommandResponse defines model for CommandResponse.
type CommandResponse struct {
	// Id The id of the command
	Id int `json:"id"`

	// Type The type of command
	Type CommandType `json:"type"`

	// Status The status of the command
	Status CommandStatus `json:"status"`

	// Source The source of the command
	Source CommandSource `json:"source"`
	Inputs CommandInputs `json:"inputs"`

	// Error The error of the command
	Error *string `json:"error"`

	// StartedAt The start date of the command
	StartedAt *time.Time `json:"startedAt"`

	// CompletedAt The completion date of the command
	CompletedAt *time.Time `json:"completedAt"`

	// CreatedAt The creation date of the command
	CreatedAt time.Time `json:"createdAt"`

	// UpdatedAt The update date of the command
	UpdatedAt time.Time `json:"updatedAt"`
}

// CommandSource The source of the command
type CommandSource = string

// CommandStatus The status of the command
type CommandStatus = string

// CommandType The type of command
type CommandType = string

// CommandsListResponse defines model for CommandsListResponse.
type CommandsListResponse struct {
	// Items The list of commands
	Items []CommandResponse `json:"items"`

	// TotalItems The total number of commands
	TotalItems int `json:"totalItems"`
}

// CreateCommandRequest defines model for CreateCommandRequest.
type CreateCommandRequest struct {
	// Type The type of command
	Type   CommandType   `json:"type"`
	Inputs CommandInputs `json:"inputs"`
}

// DischargeState defines model for DischargeState.
type DischargeState struct {
	// CurrentLimit The current limit of the discharge
	CurrentLimit uint16 `json:"currentLimit"`

	// Enabled Whether the discharge is enabled
	Enabled bool `json:"enabled"`

	// UpdatedAt The updated at time of the discharge
	UpdatedAt time.Time `json:"updatedAt"`
}

// DistanceSensorState defines model for DistanceSensorState.
type DistanceSensorState struct {
	// FrontDistance The front distance of the distance sensor
	FrontDistance uint16 `json:"frontDistance"`

	// BackDistance The back distance of the distance sensor
	BackDistance uint16 `json:"backDistance"`

	// DownDistance The down distance of the distance sensor
	DownDistance uint16 `json:"downDistance"`

	// UpdatedAt The updated at time of the distance sensor
	UpdatedAt time.Time `json:"updatedAt"`
}

// DriveMotorState defines model for DriveMotorState.
type DriveMotorState struct {
	// Direction The direction of the drive motor
	Direction string `json:"direction"`

	// Speed The speed of the drive motor (0-100)
	Speed uint8 `json:"speed"`

	// IsRunning Whether the drive motor is running
	IsRunning bool `json:"isRunning"`

	// Enabled Whether the drive motor is enabled
	Enabled bool `json:"enabled"`

	// UpdatedAt The updated at time of the drive motor
	UpdatedAt time.Time `json:"updatedAt"`
}

// ESPConfig defines model for ESPConfig.
type ESPConfig struct {
	Serial SerialConfig `json:"serial"`
}

// ESPSerialConnection defines model for ESPSerialConnection.
type ESPSerialConnection struct {
	Connected       bool       `json:"connected"`
	LastConnectedAt *time.Time `json:"lastConnectedAt"`
	Error           *string    `json:"error"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	// Code custom raybot error code
	Code string `json:"code"`

	// Message custom raybot error message
	Message string        `json:"message"`
	Details *[]FieldError `json:"details,omitempty"`
}

// FieldError defines model for FieldError.
type FieldError struct {
	// Field field name
	Field string `json:"field"`

	// Message error message
	Message string `json:"message"`
}

// GRPCConfig defines model for GRPCConfig.
type GRPCConfig struct {
	// Port The port for the gRPC server
	Port int `json:"port"`

	// Enable Whether to enable the gRPC server
	Enable bool `json:"enable"`
}

// HTTPConfig defines model for HTTPConfig.
type HTTPConfig struct {
	// Port The port for the HTTP server
	Port int `json:"port"`

	// Swagger Whether to enable the Swagger UI
	Swagger bool `json:"swagger"`
}

// HardwareConfig defines model for HardwareConfig.
type HardwareConfig struct {
	Esp ESPConfig `json:"esp"`
	Pic PICConfig `json:"pic"`
}

// LiftMotorState defines model for LiftMotorState.
type LiftMotorState struct {
	// CurrentPosition The current position of the lift motor
	CurrentPosition uint16 `json:"currentPosition"`

	// TargetPosition The target position of the lift motor
	TargetPosition uint16 `json:"targetPosition"`

	// IsRunning Whether the lift motor is running
	IsRunning bool `json:"isRunning"`

	// Enabled Whether the lift motor is enabled
	Enabled bool `json:"enabled"`

	// UpdatedAt The updated at time of the lift motor
	UpdatedAt time.Time `json:"updatedAt"`
}

// LocationState defines model for LocationState.
type LocationState struct {
	// CurrentLocation The current location of the robot
	CurrentLocation string `json:"currentLocation"`

	// UpdatedAt The updated at time of the location
	UpdatedAt time.Time `json:"updatedAt"`
}

// LogConfig defines model for LogConfig.
type LogConfig struct {
	// Level The global log level for the application
	Level string `json:"level"`

	// Format The log format for the application
	Format string `json:"format"`

	// AddSource Whether to add the source to the log
	AddSource bool `json:"addSource"`
}

// MoveBackwardInputs defines model for MoveBackwardInputs.
type MoveBackwardInputs = map[string]interface{}

// MoveForwardInputs defines model for MoveForwardInputs.
type MoveForwardInputs = map[string]interface{}

// MoveToInputs defines model for MoveToInputs.
type MoveToInputs struct {
	// Location The location to move to
	Location string `json:"location"`
}

// PICConfig defines model for PICConfig.
type PICConfig struct {
	Serial SerialConfig `json:"serial"`
}

// PICSerialConnection defines model for PICSerialConnection.
type PICSerialConnection struct {
	Connected       bool       `json:"connected"`
	LastConnectedAt *time.Time `json:"lastConnectedAt"`
	Error           *string    `json:"error"`
}

// RFIDUSBConnection defines model for RFIDUSBConnection.
type RFIDUSBConnection struct {
	Connected       bool       `json:"connected"`
	LastConnectedAt *time.Time `json:"lastConnectedAt"`
	Error           *string    `json:"error"`
}

// RobotStateResponse defines model for RobotStateResponse.
type RobotStateResponse struct {
	Battery        BatteryState        `json:"battery"`
	Charge         ChargeState         `json:"charge"`
	Discharge      DischargeState      `json:"discharge"`
	DistanceSensor DistanceSensorState `json:"distanceSensor"`
	LiftMotor      LiftMotorState      `json:"liftMotor"`
	DriveMotor     DriveMotorState     `json:"driveMotor"`
	Location       LocationState       `json:"location"`
	Cargo          CargoState          `json:"cargo"`
	CargoDoorMotor CargoDoorMotorState `json:"cargoDoorMotor"`
	AppConnection  AppConnection       `json:"appConnection"`
}

// STAConfig defines model for STAConfig.
type STAConfig struct {
	// Enable Whether to enable the STA mode
	Enable bool `json:"enable"`

	// Ssid The SSID for the wifi connection
	Ssid string `json:"ssid"`

	// Password The password for the wifi connection
	Password string `json:"password"`
}

// SerialConfig defines model for SerialConfig.
type SerialConfig struct {
	// Port The port name for the serial connection
	Port string `json:"port"`

	// BaudRate The baud rate for the serial connection
	BaudRate int `json:"baudRate"`

	// DataBits The data bits for the serial connection
	DataBits int `json:"dataBits"`

	// StopBits The stop bits for the serial connection
	StopBits float64 `json:"stopBits"`

	// Parity The parity for the serial connection
	Parity string `json:"parity"`

	// ReadTimeout The read timeout for the serial connection in seconds
	ReadTimeout int `json:"readTimeout"`
}

// SerialPort defines model for SerialPort.
type SerialPort struct {
	// Port The port of the serial port
	Port string `json:"port"`
}

// SerialPortListResponse defines model for SerialPortListResponse.
type SerialPortListResponse struct {
	// Items The list of serial ports
	Items []SerialPort `json:"items"`
}

// StopInputs defines model for StopInputs.
type StopInputs = map[string]interface{}

// WifiConfig defines model for WifiConfig.
type WifiConfig struct {
	Ap  APConfig  `json:"ap"`
	Sta STAConfig `json:"sta"`
}

// Page defines model for Page.
type Page = uint

// PageSize defines model for PageSize.
type PageSize = uint

// ListCommandsParams defines parameters for ListCommands.
type ListCommandsParams struct {
	// Page The page number
	Page *Page `form:"page,omitempty" json:"page,omitempty"`

	// PageSize The number of items per page
	PageSize *PageSize `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// Sorts Sort the commands by the given field. Use `-` to sort in descending order. Use `,` to sort by multiple fields. Example: `-created_at,status` Allowed fields:
	//   - type
	//   - status
	//   - source
	//   - created_at
	//   - updated_at
	//   - completed_at
	Sorts *string `form:"sorts,omitempty" json:"sorts,omitempty"`

	// Statuses Filter the commands by the given statuses. Use `,` to filter by multiple statuses. Example: `QUEUED,PROCESSING` Allowed values:
	//   - QUEUED
	//   - PROCESSING
	//   - SUCCEEDED
	//   - FAILED
	//   - CANCELED
	Statuses *string `form:"statuses,omitempty" json:"statuses,omitempty"`
}

// CreateCommandJSONRequestBody defines body for CreateCommand for application/json ContentType.
type CreateCommandJSONRequestBody = CreateCommandRequest

// UpdateCargoConfigJSONRequestBody defines body for UpdateCargoConfig for application/json ContentType.
type UpdateCargoConfigJSONRequestBody = CargoConfig

// UpdateCloudConfigJSONRequestBody defines body for UpdateCloudConfig for application/json ContentType.
type UpdateCloudConfigJSONRequestBody = CloudConfig

// UpdateGRPCConfigJSONRequestBody defines body for UpdateGRPCConfig for application/json ContentType.
type UpdateGRPCConfigJSONRequestBody = GRPCConfig

// UpdateHardwareConfigJSONRequestBody defines body for UpdateHardwareConfig for application/json ContentType.
type UpdateHardwareConfigJSONRequestBody = HardwareConfig

// UpdateHTTPConfigJSONRequestBody defines body for UpdateHTTPConfig for application/json ContentType.
type UpdateHTTPConfigJSONRequestBody = HTTPConfig

// UpdateLogConfigJSONRequestBody defines body for UpdateLogConfig for application/json ContentType.
type UpdateLogConfigJSONRequestBody = LogConfig

// UpdateWifiConfigJSONRequestBody defines body for UpdateWifiConfig for application/json ContentType.
type UpdateWifiConfigJSONRequestBody = WifiConfig

// AsStopInputs returns the union data inside the CommandInputs as a StopInputs
func (t CommandInputs) AsStopInputs() (StopInputs, error) {
	var body StopInputs
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStopInputs overwrites any union data inside the CommandInputs as the provided StopInputs
func (t *CommandInputs) FromStopInputs(v StopInputs) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStopInputs performs a merge with any union data inside the CommandInputs, using the provided StopInputs
func (t *CommandInputs) MergeStopInputs(v StopInputs) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsMoveForwardInputs returns the union data inside the CommandInputs as a MoveForwardInputs
func (t CommandInputs) AsMoveForwardInputs() (MoveForwardInputs, error) {
	var body MoveForwardInputs
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMoveForwardInputs overwrites any union data inside the CommandInputs as the provided MoveForwardInputs
func (t *CommandInputs) FromMoveForwardInputs(v MoveForwardInputs) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMoveForwardInputs performs a merge with any union data inside the CommandInputs, using the provided MoveForwardInputs
func (t *CommandInputs) MergeMoveForwardInputs(v MoveForwardInputs) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsMoveBackwardInputs returns the union data inside the CommandInputs as a MoveBackwardInputs
func (t CommandInputs) AsMoveBackwardInputs() (MoveBackwardInputs, error) {
	var body MoveBackwardInputs
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMoveBackwardInputs overwrites any union data inside the CommandInputs as the provided MoveBackwardInputs
func (t *CommandInputs) FromMoveBackwardInputs(v MoveBackwardInputs) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMoveBackwardInputs performs a merge with any union data inside the CommandInputs, using the provided MoveBackwardInputs
func (t *CommandInputs) MergeMoveBackwardInputs(v MoveBackwardInputs) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsMoveToInputs returns the union data inside the CommandInputs as a MoveToInputs
func (t CommandInputs) AsMoveToInputs() (MoveToInputs, error) {
	var body MoveToInputs
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMoveToInputs overwrites any union data inside the CommandInputs as the provided MoveToInputs
func (t *CommandInputs) FromMoveToInputs(v MoveToInputs) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMoveToInputs performs a merge with any union data inside the CommandInputs, using the provided MoveToInputs
func (t *CommandInputs) MergeMoveToInputs(v MoveToInputs) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCargoOpenInputs returns the union data inside the CommandInputs as a CargoOpenInputs
func (t CommandInputs) AsCargoOpenInputs() (CargoOpenInputs, error) {
	var body CargoOpenInputs
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCargoOpenInputs overwrites any union data inside the CommandInputs as the provided CargoOpenInputs
func (t *CommandInputs) FromCargoOpenInputs(v CargoOpenInputs) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCargoOpenInputs performs a merge with any union data inside the CommandInputs, using the provided CargoOpenInputs
func (t *CommandInputs) MergeCargoOpenInputs(v CargoOpenInputs) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCargoCloseInputs returns the union data inside the CommandInputs as a CargoCloseInputs
func (t CommandInputs) AsCargoCloseInputs() (CargoCloseInputs, error) {
	var body CargoCloseInputs
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCargoCloseInputs overwrites any union data inside the CommandInputs as the provided CargoCloseInputs
func (t *CommandInputs) FromCargoCloseInputs(v CargoCloseInputs) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCargoCloseInputs performs a merge with any union data inside the CommandInputs, using the provided CargoCloseInputs
func (t *CommandInputs) MergeCargoCloseInputs(v CargoCloseInputs) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCargoLiftInputs returns the union data inside the CommandInputs as a CargoLiftInputs
func (t CommandInputs) AsCargoLiftInputs() (CargoLiftInputs, error) {
	var body CargoLiftInputs
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCargoLiftInputs overwrites any union data inside the CommandInputs as the provided CargoLiftInputs
func (t *CommandInputs) FromCargoLiftInputs(v CargoLiftInputs) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCargoLiftInputs performs a merge with any union data inside the CommandInputs, using the provided CargoLiftInputs
func (t *CommandInputs) MergeCargoLiftInputs(v CargoLiftInputs) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCargoLowerInputs returns the union data inside the CommandInputs as a CargoLowerInputs
func (t CommandInputs) AsCargoLowerInputs() (CargoLowerInputs, error) {
	var body CargoLowerInputs
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCargoLowerInputs overwrites any union data inside the CommandInputs as the provided CargoLowerInputs
func (t *CommandInputs) FromCargoLowerInputs(v CargoLowerInputs) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCargoLowerInputs performs a merge with any union data inside the CommandInputs, using the provided CargoLowerInputs
func (t *CommandInputs) MergeCargoLowerInputs(v CargoLowerInputs) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCargoCheckQRInputs returns the union data inside the CommandInputs as a CargoCheckQRInputs
func (t CommandInputs) AsCargoCheckQRInputs() (CargoCheckQRInputs, error) {
	var body CargoCheckQRInputs
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCargoCheckQRInputs overwrites any union data inside the CommandInputs as the provided CargoCheckQRInputs
func (t *CommandInputs) FromCargoCheckQRInputs(v CargoCheckQRInputs) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCargoCheckQRInputs performs a merge with any union data inside the CommandInputs, using the provided CargoCheckQRInputs
func (t *CommandInputs) MergeCargoCheckQRInputs(v CargoCheckQRInputs) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t CommandInputs) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CommandInputs) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all commands
	// (GET /commands)
	ListCommands(w http.ResponseWriter, r *http.Request, params ListCommandsParams)
	// Create a command
	// (POST /commands)
	CreateCommand(w http.ResponseWriter, r *http.Request)
	// Get current processing command
	// (GET /commands/processing)
	GetCurrentProcessingCommand(w http.ResponseWriter, r *http.Request)
	// Cancel current processing command
	// (POST /commands/processing/cancel)
	CancelCurrentProcessingCommand(w http.ResponseWriter, r *http.Request)
	// Delete a command by ID
	// (DELETE /commands/{commandId})
	DeleteCommandById(w http.ResponseWriter, r *http.Request, commandId int)
	// Get a command by ID
	// (GET /commands/{commandId})
	GetCommandById(w http.ResponseWriter, r *http.Request, commandId int)
	// Get the cargo configuration
	// (GET /configs/cargo)
	GetCargoConfig(w http.ResponseWriter, r *http.Request)
	// Update the cargo configuration
	// (PUT /configs/cargo)
	UpdateCargoConfig(w http.ResponseWriter, r *http.Request)
	// Get the cloud configuration
	// (GET /configs/cloud)
	GetCloudConfig(w http.ResponseWriter, r *http.Request)
	// Update the cloud configuration
	// (PUT /configs/cloud)
	UpdateCloudConfig(w http.ResponseWriter, r *http.Request)
	// Get the gRPC configuration
	// (GET /configs/grpc)
	GetGRPCConfig(w http.ResponseWriter, r *http.Request)
	// Update the gRPC configuration
	// (PUT /configs/grpc)
	UpdateGRPCConfig(w http.ResponseWriter, r *http.Request)
	// Get the hardware configuration
	// (GET /configs/hardware)
	GetHardwareConfig(w http.ResponseWriter, r *http.Request)
	// Update the hardware configuration
	// (PUT /configs/hardware)
	UpdateHardwareConfig(w http.ResponseWriter, r *http.Request)
	// Get the HTTP configuration
	// (GET /configs/http)
	GetHTTPConfig(w http.ResponseWriter, r *http.Request)
	// Update the HTTP configuration
	// (PUT /configs/http)
	UpdateHTTPConfig(w http.ResponseWriter, r *http.Request)
	// Get the log configuration
	// (GET /configs/log)
	GetLogConfig(w http.ResponseWriter, r *http.Request)
	// Update the log configuration
	// (PUT /configs/log)
	UpdateLogConfig(w http.ResponseWriter, r *http.Request)
	// Get the wifi configuration
	// (GET /configs/wifi)
	GetWifiConfig(w http.ResponseWriter, r *http.Request)
	// Update the wifi configuration
	// (PUT /configs/wifi)
	UpdateWifiConfig(w http.ResponseWriter, r *http.Request)
	// List available serial ports
	// (GET /peripherals/serials)
	ListAvailableSerialPorts(w http.ResponseWriter, r *http.Request)
	// Get robot state
	// (GET /robot-state)
	GetRobotState(w http.ResponseWriter, r *http.Request)
	// Reboot the system
	// (POST /system/reboot)
	RebootSystem(w http.ResponseWriter, r *http.Request)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// List all commands
// (GET /commands)
func (_ Unimplemented) ListCommands(w http.ResponseWriter, r *http.Request, params ListCommandsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a command
// (POST /commands)
func (_ Unimplemented) CreateCommand(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get current processing command
// (GET /commands/processing)
func (_ Unimplemented) GetCurrentProcessingCommand(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Cancel current processing command
// (POST /commands/processing/cancel)
func (_ Unimplemented) CancelCurrentProcessingCommand(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete a command by ID
// (DELETE /commands/{commandId})
func (_ Unimplemented) DeleteCommandById(w http.ResponseWriter, r *http.Request, commandId int) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get a command by ID
// (GET /commands/{commandId})
func (_ Unimplemented) GetCommandById(w http.ResponseWriter, r *http.Request, commandId int) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get the cargo configuration
// (GET /configs/cargo)
func (_ Unimplemented) GetCargoConfig(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update the cargo configuration
// (PUT /configs/cargo)
func (_ Unimplemented) UpdateCargoConfig(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get the cloud configuration
// (GET /configs/cloud)
func (_ Unimplemented) GetCloudConfig(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update the cloud configuration
// (PUT /configs/cloud)
func (_ Unimplemented) UpdateCloudConfig(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get the gRPC configuration
// (GET /configs/grpc)
func (_ Unimplemented) GetGRPCConfig(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update the gRPC configuration
// (PUT /configs/grpc)
func (_ Unimplemented) UpdateGRPCConfig(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get the hardware configuration
// (GET /configs/hardware)
func (_ Unimplemented) GetHardwareConfig(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update the hardware configuration
// (PUT /configs/hardware)
func (_ Unimplemented) UpdateHardwareConfig(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get the HTTP configuration
// (GET /configs/http)
func (_ Unimplemented) GetHTTPConfig(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update the HTTP configuration
// (PUT /configs/http)
func (_ Unimplemented) UpdateHTTPConfig(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get the log configuration
// (GET /configs/log)
func (_ Unimplemented) GetLogConfig(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update the log configuration
// (PUT /configs/log)
func (_ Unimplemented) UpdateLogConfig(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get the wifi configuration
// (GET /configs/wifi)
func (_ Unimplemented) GetWifiConfig(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update the wifi configuration
// (PUT /configs/wifi)
func (_ Unimplemented) UpdateWifiConfig(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List available serial ports
// (GET /peripherals/serials)
func (_ Unimplemented) ListAvailableSerialPorts(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get robot state
// (GET /robot-state)
func (_ Unimplemented) GetRobotState(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Reboot the system
// (POST /system/reboot)
func (_ Unimplemented) RebootSystem(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// ListCommands operation middleware
func (siw *ServerInterfaceWrapper) ListCommands(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListCommandsParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", r.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "pageSize", Err: err})
		return
	}

	// ------------- Optional query parameter "sorts" -------------

	err = runtime.BindQueryParameter("form", true, false, "sorts", r.URL.Query(), &params.Sorts)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sorts", Err: err})
		return
	}

	// ------------- Optional query parameter "statuses" -------------

	err = runtime.BindQueryParameter("form", true, false, "statuses", r.URL.Query(), &params.Statuses)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "statuses", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListCommands(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateCommand operation middleware
func (siw *ServerInterfaceWrapper) CreateCommand(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateCommand(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetCurrentProcessingCommand operation middleware
func (siw *ServerInterfaceWrapper) GetCurrentProcessingCommand(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCurrentProcessingCommand(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CancelCurrentProcessingCommand operation middleware
func (siw *ServerInterfaceWrapper) CancelCurrentProcessingCommand(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CancelCurrentProcessingCommand(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteCommandById operation middleware
func (siw *ServerInterfaceWrapper) DeleteCommandById(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "commandId" -------------
	var commandId int

	err = runtime.BindStyledParameterWithOptions("simple", "commandId", chi.URLParam(r, "commandId"), &commandId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "commandId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteCommandById(w, r, commandId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetCommandById operation middleware
func (siw *ServerInterfaceWrapper) GetCommandById(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "commandId" -------------
	var commandId int

	err = runtime.BindStyledParameterWithOptions("simple", "commandId", chi.URLParam(r, "commandId"), &commandId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "commandId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCommandById(w, r, commandId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetCargoConfig operation middleware
func (siw *ServerInterfaceWrapper) GetCargoConfig(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCargoConfig(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateCargoConfig operation middleware
func (siw *ServerInterfaceWrapper) UpdateCargoConfig(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateCargoConfig(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetCloudConfig operation middleware
func (siw *ServerInterfaceWrapper) GetCloudConfig(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCloudConfig(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateCloudConfig operation middleware
func (siw *ServerInterfaceWrapper) UpdateCloudConfig(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateCloudConfig(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetGRPCConfig operation middleware
func (siw *ServerInterfaceWrapper) GetGRPCConfig(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetGRPCConfig(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateGRPCConfig operation middleware
func (siw *ServerInterfaceWrapper) UpdateGRPCConfig(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateGRPCConfig(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetHardwareConfig operation middleware
func (siw *ServerInterfaceWrapper) GetHardwareConfig(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetHardwareConfig(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateHardwareConfig operation middleware
func (siw *ServerInterfaceWrapper) UpdateHardwareConfig(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateHardwareConfig(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetHTTPConfig operation middleware
func (siw *ServerInterfaceWrapper) GetHTTPConfig(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetHTTPConfig(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateHTTPConfig operation middleware
func (siw *ServerInterfaceWrapper) UpdateHTTPConfig(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateHTTPConfig(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetLogConfig operation middleware
func (siw *ServerInterfaceWrapper) GetLogConfig(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetLogConfig(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateLogConfig operation middleware
func (siw *ServerInterfaceWrapper) UpdateLogConfig(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateLogConfig(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetWifiConfig operation middleware
func (siw *ServerInterfaceWrapper) GetWifiConfig(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetWifiConfig(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateWifiConfig operation middleware
func (siw *ServerInterfaceWrapper) UpdateWifiConfig(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateWifiConfig(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ListAvailableSerialPorts operation middleware
func (siw *ServerInterfaceWrapper) ListAvailableSerialPorts(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListAvailableSerialPorts(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetRobotState operation middleware
func (siw *ServerInterfaceWrapper) GetRobotState(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetRobotState(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// RebootSystem operation middleware
func (siw *ServerInterfaceWrapper) RebootSystem(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RebootSystem(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/commands", wrapper.ListCommands)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/commands", wrapper.CreateCommand)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/commands/processing", wrapper.GetCurrentProcessingCommand)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/commands/processing/cancel", wrapper.CancelCurrentProcessingCommand)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/commands/{commandId}", wrapper.DeleteCommandById)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/commands/{commandId}", wrapper.GetCommandById)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/configs/cargo", wrapper.GetCargoConfig)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/configs/cargo", wrapper.UpdateCargoConfig)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/configs/cloud", wrapper.GetCloudConfig)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/configs/cloud", wrapper.UpdateCloudConfig)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/configs/grpc", wrapper.GetGRPCConfig)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/configs/grpc", wrapper.UpdateGRPCConfig)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/configs/hardware", wrapper.GetHardwareConfig)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/configs/hardware", wrapper.UpdateHardwareConfig)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/configs/http", wrapper.GetHTTPConfig)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/configs/http", wrapper.UpdateHTTPConfig)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/configs/log", wrapper.GetLogConfig)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/configs/log", wrapper.UpdateLogConfig)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/configs/wifi", wrapper.GetWifiConfig)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/configs/wifi", wrapper.UpdateWifiConfig)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/peripherals/serials", wrapper.ListAvailableSerialPorts)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/robot-state", wrapper.GetRobotState)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/system/reboot", wrapper.RebootSystem)
	})

	return r
}

type ListCommandsRequestObject struct {
	Params ListCommandsParams
}

type ListCommandsResponseObject interface {
	VisitListCommandsResponse(w http.ResponseWriter) error
}

type ListCommands200JSONResponse CommandsListResponse

func (response ListCommands200JSONResponse) VisitListCommandsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListCommands400JSONResponse ErrorResponse

func (response ListCommands400JSONResponse) VisitListCommandsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateCommandRequestObject struct {
	Body *CreateCommandJSONRequestBody
}

type CreateCommandResponseObject interface {
	VisitCreateCommandResponse(w http.ResponseWriter) error
}

type CreateCommand201JSONResponse CommandResponse

func (response CreateCommand201JSONResponse) VisitCreateCommandResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateCommand400JSONResponse ErrorResponse

func (response CreateCommand400JSONResponse) VisitCreateCommandResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetCurrentProcessingCommandRequestObject struct {
}

type GetCurrentProcessingCommandResponseObject interface {
	VisitGetCurrentProcessingCommandResponse(w http.ResponseWriter) error
}

type GetCurrentProcessingCommand200JSONResponse CommandResponse

func (response GetCurrentProcessingCommand200JSONResponse) VisitGetCurrentProcessingCommandResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetCurrentProcessingCommand404JSONResponse ErrorResponse

func (response GetCurrentProcessingCommand404JSONResponse) VisitGetCurrentProcessingCommandResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type CancelCurrentProcessingCommandRequestObject struct {
}

type CancelCurrentProcessingCommandResponseObject interface {
	VisitCancelCurrentProcessingCommandResponse(w http.ResponseWriter) error
}

type CancelCurrentProcessingCommand204Response struct {
}

func (response CancelCurrentProcessingCommand204Response) VisitCancelCurrentProcessingCommandResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type CancelCurrentProcessingCommand400JSONResponse ErrorResponse

func (response CancelCurrentProcessingCommand400JSONResponse) VisitCancelCurrentProcessingCommandResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteCommandByIdRequestObject struct {
	CommandId int `json:"commandId"`
}

type DeleteCommandByIdResponseObject interface {
	VisitDeleteCommandByIdResponse(w http.ResponseWriter) error
}

type DeleteCommandById204Response struct {
}

func (response DeleteCommandById204Response) VisitDeleteCommandByIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteCommandById400JSONResponse ErrorResponse

func (response DeleteCommandById400JSONResponse) VisitDeleteCommandByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetCommandByIdRequestObject struct {
	CommandId int `json:"commandId"`
}

type GetCommandByIdResponseObject interface {
	VisitGetCommandByIdResponse(w http.ResponseWriter) error
}

type GetCommandById200JSONResponse CommandResponse

func (response GetCommandById200JSONResponse) VisitGetCommandByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetCommandById404JSONResponse ErrorResponse

func (response GetCommandById404JSONResponse) VisitGetCommandByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetCargoConfigRequestObject struct {
}

type GetCargoConfigResponseObject interface {
	VisitGetCargoConfigResponse(w http.ResponseWriter) error
}

type GetCargoConfig200JSONResponse CargoConfig

func (response GetCargoConfig200JSONResponse) VisitGetCargoConfigResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetCargoConfig400JSONResponse ErrorResponse

func (response GetCargoConfig400JSONResponse) VisitGetCargoConfigResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdateCargoConfigRequestObject struct {
	Body *UpdateCargoConfigJSONRequestBody
}

type UpdateCargoConfigResponseObject interface {
	VisitUpdateCargoConfigResponse(w http.ResponseWriter) error
}

type UpdateCargoConfig200JSONResponse CargoConfig

func (response UpdateCargoConfig200JSONResponse) VisitUpdateCargoConfigResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateCargoConfig400JSONResponse ErrorResponse

func (response UpdateCargoConfig400JSONResponse) VisitUpdateCargoConfigResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetCloudConfigRequestObject struct {
}

type GetCloudConfigResponseObject interface {
	VisitGetCloudConfigResponse(w http.ResponseWriter) error
}

type GetCloudConfig200JSONResponse CloudConfig

func (response GetCloudConfig200JSONResponse) VisitGetCloudConfigResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetCloudConfig400JSONResponse ErrorResponse

func (response GetCloudConfig400JSONResponse) VisitGetCloudConfigResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdateCloudConfigRequestObject struct {
	Body *UpdateCloudConfigJSONRequestBody
}

type UpdateCloudConfigResponseObject interface {
	VisitUpdateCloudConfigResponse(w http.ResponseWriter) error
}

type UpdateCloudConfig200JSONResponse CloudConfig

func (response UpdateCloudConfig200JSONResponse) VisitUpdateCloudConfigResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateCloudConfig400JSONResponse ErrorResponse

func (response UpdateCloudConfig400JSONResponse) VisitUpdateCloudConfigResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetGRPCConfigRequestObject struct {
}

type GetGRPCConfigResponseObject interface {
	VisitGetGRPCConfigResponse(w http.ResponseWriter) error
}

type GetGRPCConfig200JSONResponse GRPCConfig

func (response GetGRPCConfig200JSONResponse) VisitGetGRPCConfigResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetGRPCConfig400JSONResponse ErrorResponse

func (response GetGRPCConfig400JSONResponse) VisitGetGRPCConfigResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdateGRPCConfigRequestObject struct {
	Body *UpdateGRPCConfigJSONRequestBody
}

type UpdateGRPCConfigResponseObject interface {
	VisitUpdateGRPCConfigResponse(w http.ResponseWriter) error
}

type UpdateGRPCConfig200JSONResponse GRPCConfig

func (response UpdateGRPCConfig200JSONResponse) VisitUpdateGRPCConfigResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateGRPCConfig400JSONResponse ErrorResponse

func (response UpdateGRPCConfig400JSONResponse) VisitUpdateGRPCConfigResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetHardwareConfigRequestObject struct {
}

type GetHardwareConfigResponseObject interface {
	VisitGetHardwareConfigResponse(w http.ResponseWriter) error
}

type GetHardwareConfig200JSONResponse HardwareConfig

func (response GetHardwareConfig200JSONResponse) VisitGetHardwareConfigResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetHardwareConfig400JSONResponse ErrorResponse

func (response GetHardwareConfig400JSONResponse) VisitGetHardwareConfigResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdateHardwareConfigRequestObject struct {
	Body *UpdateHardwareConfigJSONRequestBody
}

type UpdateHardwareConfigResponseObject interface {
	VisitUpdateHardwareConfigResponse(w http.ResponseWriter) error
}

type UpdateHardwareConfig200JSONResponse HardwareConfig

func (response UpdateHardwareConfig200JSONResponse) VisitUpdateHardwareConfigResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateHardwareConfig400JSONResponse ErrorResponse

func (response UpdateHardwareConfig400JSONResponse) VisitUpdateHardwareConfigResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetHTTPConfigRequestObject struct {
}

type GetHTTPConfigResponseObject interface {
	VisitGetHTTPConfigResponse(w http.ResponseWriter) error
}

type GetHTTPConfig200JSONResponse HTTPConfig

func (response GetHTTPConfig200JSONResponse) VisitGetHTTPConfigResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetHTTPConfig400JSONResponse ErrorResponse

func (response GetHTTPConfig400JSONResponse) VisitGetHTTPConfigResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdateHTTPConfigRequestObject struct {
	Body *UpdateHTTPConfigJSONRequestBody
}

type UpdateHTTPConfigResponseObject interface {
	VisitUpdateHTTPConfigResponse(w http.ResponseWriter) error
}

type UpdateHTTPConfig200JSONResponse HTTPConfig

func (response UpdateHTTPConfig200JSONResponse) VisitUpdateHTTPConfigResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateHTTPConfig400JSONResponse ErrorResponse

func (response UpdateHTTPConfig400JSONResponse) VisitUpdateHTTPConfigResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetLogConfigRequestObject struct {
}

type GetLogConfigResponseObject interface {
	VisitGetLogConfigResponse(w http.ResponseWriter) error
}

type GetLogConfig200JSONResponse LogConfig

func (response GetLogConfig200JSONResponse) VisitGetLogConfigResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetLogConfig400JSONResponse ErrorResponse

func (response GetLogConfig400JSONResponse) VisitGetLogConfigResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdateLogConfigRequestObject struct {
	Body *UpdateLogConfigJSONRequestBody
}

type UpdateLogConfigResponseObject interface {
	VisitUpdateLogConfigResponse(w http.ResponseWriter) error
}

type UpdateLogConfig200JSONResponse LogConfig

func (response UpdateLogConfig200JSONResponse) VisitUpdateLogConfigResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateLogConfig400JSONResponse ErrorResponse

func (response UpdateLogConfig400JSONResponse) VisitUpdateLogConfigResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetWifiConfigRequestObject struct {
}

type GetWifiConfigResponseObject interface {
	VisitGetWifiConfigResponse(w http.ResponseWriter) error
}

type GetWifiConfig200JSONResponse WifiConfig

func (response GetWifiConfig200JSONResponse) VisitGetWifiConfigResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetWifiConfig400JSONResponse ErrorResponse

func (response GetWifiConfig400JSONResponse) VisitGetWifiConfigResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdateWifiConfigRequestObject struct {
	Body *UpdateWifiConfigJSONRequestBody
}

type UpdateWifiConfigResponseObject interface {
	VisitUpdateWifiConfigResponse(w http.ResponseWriter) error
}

type UpdateWifiConfig200JSONResponse WifiConfig

func (response UpdateWifiConfig200JSONResponse) VisitUpdateWifiConfigResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateWifiConfig400JSONResponse ErrorResponse

func (response UpdateWifiConfig400JSONResponse) VisitUpdateWifiConfigResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ListAvailableSerialPortsRequestObject struct {
}

type ListAvailableSerialPortsResponseObject interface {
	VisitListAvailableSerialPortsResponse(w http.ResponseWriter) error
}

type ListAvailableSerialPorts200JSONResponse SerialPortListResponse

func (response ListAvailableSerialPorts200JSONResponse) VisitListAvailableSerialPortsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListAvailableSerialPorts400JSONResponse ErrorResponse

func (response ListAvailableSerialPorts400JSONResponse) VisitListAvailableSerialPortsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetRobotStateRequestObject struct {
}

type GetRobotStateResponseObject interface {
	VisitGetRobotStateResponse(w http.ResponseWriter) error
}

type GetRobotState200JSONResponse RobotStateResponse

func (response GetRobotState200JSONResponse) VisitGetRobotStateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetRobotState400JSONResponse ErrorResponse

func (response GetRobotState400JSONResponse) VisitGetRobotStateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type RebootSystemRequestObject struct {
}

type RebootSystemResponseObject interface {
	VisitRebootSystemResponse(w http.ResponseWriter) error
}

type RebootSystem204Response struct {
}

func (response RebootSystem204Response) VisitRebootSystemResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type RebootSystem400JSONResponse ErrorResponse

func (response RebootSystem400JSONResponse) VisitRebootSystemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// List all commands
	// (GET /commands)
	ListCommands(ctx context.Context, request ListCommandsRequestObject) (ListCommandsResponseObject, error)
	// Create a command
	// (POST /commands)
	CreateCommand(ctx context.Context, request CreateCommandRequestObject) (CreateCommandResponseObject, error)
	// Get current processing command
	// (GET /commands/processing)
	GetCurrentProcessingCommand(ctx context.Context, request GetCurrentProcessingCommandRequestObject) (GetCurrentProcessingCommandResponseObject, error)
	// Cancel current processing command
	// (POST /commands/processing/cancel)
	CancelCurrentProcessingCommand(ctx context.Context, request CancelCurrentProcessingCommandRequestObject) (CancelCurrentProcessingCommandResponseObject, error)
	// Delete a command by ID
	// (DELETE /commands/{commandId})
	DeleteCommandById(ctx context.Context, request DeleteCommandByIdRequestObject) (DeleteCommandByIdResponseObject, error)
	// Get a command by ID
	// (GET /commands/{commandId})
	GetCommandById(ctx context.Context, request GetCommandByIdRequestObject) (GetCommandByIdResponseObject, error)
	// Get the cargo configuration
	// (GET /configs/cargo)
	GetCargoConfig(ctx context.Context, request GetCargoConfigRequestObject) (GetCargoConfigResponseObject, error)
	// Update the cargo configuration
	// (PUT /configs/cargo)
	UpdateCargoConfig(ctx context.Context, request UpdateCargoConfigRequestObject) (UpdateCargoConfigResponseObject, error)
	// Get the cloud configuration
	// (GET /configs/cloud)
	GetCloudConfig(ctx context.Context, request GetCloudConfigRequestObject) (GetCloudConfigResponseObject, error)
	// Update the cloud configuration
	// (PUT /configs/cloud)
	UpdateCloudConfig(ctx context.Context, request UpdateCloudConfigRequestObject) (UpdateCloudConfigResponseObject, error)
	// Get the gRPC configuration
	// (GET /configs/grpc)
	GetGRPCConfig(ctx context.Context, request GetGRPCConfigRequestObject) (GetGRPCConfigResponseObject, error)
	// Update the gRPC configuration
	// (PUT /configs/grpc)
	UpdateGRPCConfig(ctx context.Context, request UpdateGRPCConfigRequestObject) (UpdateGRPCConfigResponseObject, error)
	// Get the hardware configuration
	// (GET /configs/hardware)
	GetHardwareConfig(ctx context.Context, request GetHardwareConfigRequestObject) (GetHardwareConfigResponseObject, error)
	// Update the hardware configuration
	// (PUT /configs/hardware)
	UpdateHardwareConfig(ctx context.Context, request UpdateHardwareConfigRequestObject) (UpdateHardwareConfigResponseObject, error)
	// Get the HTTP configuration
	// (GET /configs/http)
	GetHTTPConfig(ctx context.Context, request GetHTTPConfigRequestObject) (GetHTTPConfigResponseObject, error)
	// Update the HTTP configuration
	// (PUT /configs/http)
	UpdateHTTPConfig(ctx context.Context, request UpdateHTTPConfigRequestObject) (UpdateHTTPConfigResponseObject, error)
	// Get the log configuration
	// (GET /configs/log)
	GetLogConfig(ctx context.Context, request GetLogConfigRequestObject) (GetLogConfigResponseObject, error)
	// Update the log configuration
	// (PUT /configs/log)
	UpdateLogConfig(ctx context.Context, request UpdateLogConfigRequestObject) (UpdateLogConfigResponseObject, error)
	// Get the wifi configuration
	// (GET /configs/wifi)
	GetWifiConfig(ctx context.Context, request GetWifiConfigRequestObject) (GetWifiConfigResponseObject, error)
	// Update the wifi configuration
	// (PUT /configs/wifi)
	UpdateWifiConfig(ctx context.Context, request UpdateWifiConfigRequestObject) (UpdateWifiConfigResponseObject, error)
	// List available serial ports
	// (GET /peripherals/serials)
	ListAvailableSerialPorts(ctx context.Context, request ListAvailableSerialPortsRequestObject) (ListAvailableSerialPortsResponseObject, error)
	// Get robot state
	// (GET /robot-state)
	GetRobotState(ctx context.Context, request GetRobotStateRequestObject) (GetRobotStateResponseObject, error)
	// Reboot the system
	// (POST /system/reboot)
	RebootSystem(ctx context.Context, request RebootSystemRequestObject) (RebootSystemResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// ListCommands operation middleware
func (sh *strictHandler) ListCommands(w http.ResponseWriter, r *http.Request, params ListCommandsParams) {
	var request ListCommandsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListCommands(ctx, request.(ListCommandsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListCommands")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListCommandsResponseObject); ok {
		if err := validResponse.VisitListCommandsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateCommand operation middleware
func (sh *strictHandler) CreateCommand(w http.ResponseWriter, r *http.Request) {
	var request CreateCommandRequestObject

	var body CreateCommandJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateCommand(ctx, request.(CreateCommandRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateCommand")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateCommandResponseObject); ok {
		if err := validResponse.VisitCreateCommandResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetCurrentProcessingCommand operation middleware
func (sh *strictHandler) GetCurrentProcessingCommand(w http.ResponseWriter, r *http.Request) {
	var request GetCurrentProcessingCommandRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetCurrentProcessingCommand(ctx, request.(GetCurrentProcessingCommandRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCurrentProcessingCommand")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetCurrentProcessingCommandResponseObject); ok {
		if err := validResponse.VisitGetCurrentProcessingCommandResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CancelCurrentProcessingCommand operation middleware
func (sh *strictHandler) CancelCurrentProcessingCommand(w http.ResponseWriter, r *http.Request) {
	var request CancelCurrentProcessingCommandRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CancelCurrentProcessingCommand(ctx, request.(CancelCurrentProcessingCommandRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CancelCurrentProcessingCommand")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CancelCurrentProcessingCommandResponseObject); ok {
		if err := validResponse.VisitCancelCurrentProcessingCommandResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteCommandById operation middleware
func (sh *strictHandler) DeleteCommandById(w http.ResponseWriter, r *http.Request, commandId int) {
	var request DeleteCommandByIdRequestObject

	request.CommandId = commandId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteCommandById(ctx, request.(DeleteCommandByIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteCommandById")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteCommandByIdResponseObject); ok {
		if err := validResponse.VisitDeleteCommandByIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetCommandById operation middleware
func (sh *strictHandler) GetCommandById(w http.ResponseWriter, r *http.Request, commandId int) {
	var request GetCommandByIdRequestObject

	request.CommandId = commandId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetCommandById(ctx, request.(GetCommandByIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCommandById")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetCommandByIdResponseObject); ok {
		if err := validResponse.VisitGetCommandByIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetCargoConfig operation middleware
func (sh *strictHandler) GetCargoConfig(w http.ResponseWriter, r *http.Request) {
	var request GetCargoConfigRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetCargoConfig(ctx, request.(GetCargoConfigRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCargoConfig")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetCargoConfigResponseObject); ok {
		if err := validResponse.VisitGetCargoConfigResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateCargoConfig operation middleware
func (sh *strictHandler) UpdateCargoConfig(w http.ResponseWriter, r *http.Request) {
	var request UpdateCargoConfigRequestObject

	var body UpdateCargoConfigJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateCargoConfig(ctx, request.(UpdateCargoConfigRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateCargoConfig")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateCargoConfigResponseObject); ok {
		if err := validResponse.VisitUpdateCargoConfigResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetCloudConfig operation middleware
func (sh *strictHandler) GetCloudConfig(w http.ResponseWriter, r *http.Request) {
	var request GetCloudConfigRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetCloudConfig(ctx, request.(GetCloudConfigRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCloudConfig")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetCloudConfigResponseObject); ok {
		if err := validResponse.VisitGetCloudConfigResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateCloudConfig operation middleware
func (sh *strictHandler) UpdateCloudConfig(w http.ResponseWriter, r *http.Request) {
	var request UpdateCloudConfigRequestObject

	var body UpdateCloudConfigJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateCloudConfig(ctx, request.(UpdateCloudConfigRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateCloudConfig")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateCloudConfigResponseObject); ok {
		if err := validResponse.VisitUpdateCloudConfigResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetGRPCConfig operation middleware
func (sh *strictHandler) GetGRPCConfig(w http.ResponseWriter, r *http.Request) {
	var request GetGRPCConfigRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetGRPCConfig(ctx, request.(GetGRPCConfigRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetGRPCConfig")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetGRPCConfigResponseObject); ok {
		if err := validResponse.VisitGetGRPCConfigResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateGRPCConfig operation middleware
func (sh *strictHandler) UpdateGRPCConfig(w http.ResponseWriter, r *http.Request) {
	var request UpdateGRPCConfigRequestObject

	var body UpdateGRPCConfigJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateGRPCConfig(ctx, request.(UpdateGRPCConfigRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateGRPCConfig")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateGRPCConfigResponseObject); ok {
		if err := validResponse.VisitUpdateGRPCConfigResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetHardwareConfig operation middleware
func (sh *strictHandler) GetHardwareConfig(w http.ResponseWriter, r *http.Request) {
	var request GetHardwareConfigRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetHardwareConfig(ctx, request.(GetHardwareConfigRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetHardwareConfig")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetHardwareConfigResponseObject); ok {
		if err := validResponse.VisitGetHardwareConfigResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateHardwareConfig operation middleware
func (sh *strictHandler) UpdateHardwareConfig(w http.ResponseWriter, r *http.Request) {
	var request UpdateHardwareConfigRequestObject

	var body UpdateHardwareConfigJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateHardwareConfig(ctx, request.(UpdateHardwareConfigRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateHardwareConfig")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateHardwareConfigResponseObject); ok {
		if err := validResponse.VisitUpdateHardwareConfigResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetHTTPConfig operation middleware
func (sh *strictHandler) GetHTTPConfig(w http.ResponseWriter, r *http.Request) {
	var request GetHTTPConfigRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetHTTPConfig(ctx, request.(GetHTTPConfigRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetHTTPConfig")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetHTTPConfigResponseObject); ok {
		if err := validResponse.VisitGetHTTPConfigResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateHTTPConfig operation middleware
func (sh *strictHandler) UpdateHTTPConfig(w http.ResponseWriter, r *http.Request) {
	var request UpdateHTTPConfigRequestObject

	var body UpdateHTTPConfigJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateHTTPConfig(ctx, request.(UpdateHTTPConfigRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateHTTPConfig")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateHTTPConfigResponseObject); ok {
		if err := validResponse.VisitUpdateHTTPConfigResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetLogConfig operation middleware
func (sh *strictHandler) GetLogConfig(w http.ResponseWriter, r *http.Request) {
	var request GetLogConfigRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetLogConfig(ctx, request.(GetLogConfigRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetLogConfig")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetLogConfigResponseObject); ok {
		if err := validResponse.VisitGetLogConfigResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateLogConfig operation middleware
func (sh *strictHandler) UpdateLogConfig(w http.ResponseWriter, r *http.Request) {
	var request UpdateLogConfigRequestObject

	var body UpdateLogConfigJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateLogConfig(ctx, request.(UpdateLogConfigRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateLogConfig")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateLogConfigResponseObject); ok {
		if err := validResponse.VisitUpdateLogConfigResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetWifiConfig operation middleware
func (sh *strictHandler) GetWifiConfig(w http.ResponseWriter, r *http.Request) {
	var request GetWifiConfigRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetWifiConfig(ctx, request.(GetWifiConfigRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetWifiConfig")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetWifiConfigResponseObject); ok {
		if err := validResponse.VisitGetWifiConfigResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateWifiConfig operation middleware
func (sh *strictHandler) UpdateWifiConfig(w http.ResponseWriter, r *http.Request) {
	var request UpdateWifiConfigRequestObject

	var body UpdateWifiConfigJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateWifiConfig(ctx, request.(UpdateWifiConfigRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateWifiConfig")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateWifiConfigResponseObject); ok {
		if err := validResponse.VisitUpdateWifiConfigResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListAvailableSerialPorts operation middleware
func (sh *strictHandler) ListAvailableSerialPorts(w http.ResponseWriter, r *http.Request) {
	var request ListAvailableSerialPortsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListAvailableSerialPorts(ctx, request.(ListAvailableSerialPortsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListAvailableSerialPorts")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListAvailableSerialPortsResponseObject); ok {
		if err := validResponse.VisitListAvailableSerialPortsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetRobotState operation middleware
func (sh *strictHandler) GetRobotState(w http.ResponseWriter, r *http.Request) {
	var request GetRobotStateRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetRobotState(ctx, request.(GetRobotStateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetRobotState")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetRobotStateResponseObject); ok {
		if err := validResponse.VisitGetRobotStateResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// RebootSystem operation middleware
func (sh *strictHandler) RebootSystem(w http.ResponseWriter, r *http.Request) {
	var request RebootSystemRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.RebootSystem(ctx, request.(RebootSystemRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RebootSystem")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(RebootSystemResponseObject); ok {
		if err := validResponse.VisitRebootSystemResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"zf8FAAD//zPSymdNcQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
