// Code generated by mockery v2.53.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	distancesensor "github.com/tbe-team/raybot/internal/services/distancesensor"
)

// FakeService is an autogenerated mock type for the Service type
type FakeService struct {
	mock.Mock
}

type FakeService_Expecter struct {
	mock *mock.Mock
}

func (_m *FakeService) EXPECT() *FakeService_Expecter {
	return &FakeService_Expecter{mock: &_m.Mock}
}

// GetDistanceSensorState provides a mock function with given fields: ctx
func (_m *FakeService) GetDistanceSensorState(ctx context.Context) (distancesensor.DistanceSensorState, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetDistanceSensorState")
	}

	var r0 distancesensor.DistanceSensorState
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (distancesensor.DistanceSensorState, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) distancesensor.DistanceSensorState); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(distancesensor.DistanceSensorState)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FakeService_GetDistanceSensorState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDistanceSensorState'
type FakeService_GetDistanceSensorState_Call struct {
	*mock.Call
}

// GetDistanceSensorState is a helper method to define mock.On call
//   - ctx context.Context
func (_e *FakeService_Expecter) GetDistanceSensorState(ctx interface{}) *FakeService_GetDistanceSensorState_Call {
	return &FakeService_GetDistanceSensorState_Call{Call: _e.mock.On("GetDistanceSensorState", ctx)}
}

func (_c *FakeService_GetDistanceSensorState_Call) Run(run func(ctx context.Context)) *FakeService_GetDistanceSensorState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *FakeService_GetDistanceSensorState_Call) Return(_a0 distancesensor.DistanceSensorState, _a1 error) *FakeService_GetDistanceSensorState_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FakeService_GetDistanceSensorState_Call) RunAndReturn(run func(context.Context) (distancesensor.DistanceSensorState, error)) *FakeService_GetDistanceSensorState_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateDistanceSensorState provides a mock function with given fields: ctx, params
func (_m *FakeService) UpdateDistanceSensorState(ctx context.Context, params distancesensor.UpdateDistanceSensorStateParams) error {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDistanceSensorState")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, distancesensor.UpdateDistanceSensorStateParams) error); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FakeService_UpdateDistanceSensorState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateDistanceSensorState'
type FakeService_UpdateDistanceSensorState_Call struct {
	*mock.Call
}

// UpdateDistanceSensorState is a helper method to define mock.On call
//   - ctx context.Context
//   - params distancesensor.UpdateDistanceSensorStateParams
func (_e *FakeService_Expecter) UpdateDistanceSensorState(ctx interface{}, params interface{}) *FakeService_UpdateDistanceSensorState_Call {
	return &FakeService_UpdateDistanceSensorState_Call{Call: _e.mock.On("UpdateDistanceSensorState", ctx, params)}
}

func (_c *FakeService_UpdateDistanceSensorState_Call) Run(run func(ctx context.Context, params distancesensor.UpdateDistanceSensorStateParams)) *FakeService_UpdateDistanceSensorState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(distancesensor.UpdateDistanceSensorStateParams))
	})
	return _c
}

func (_c *FakeService_UpdateDistanceSensorState_Call) Return(_a0 error) *FakeService_UpdateDistanceSensorState_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FakeService_UpdateDistanceSensorState_Call) RunAndReturn(run func(context.Context, distancesensor.UpdateDistanceSensorStateParams) error) *FakeService_UpdateDistanceSensorState_Call {
	_c.Call.Return(run)
	return _c
}

// NewFakeService creates a new instance of FakeService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFakeService(t interface {
	mock.TestingT
	Cleanup(func())
}) *FakeService {
	mock := &FakeService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
