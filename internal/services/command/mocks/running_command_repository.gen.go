// Code generated by mockery v2.53.1. DO NOT EDIT.

package mocks

import (
	context "context"

	command "github.com/tbe-team/raybot/internal/services/command"

	mock "github.com/stretchr/testify/mock"
)

// FakeRunningCommandRepository is an autogenerated mock type for the RunningCommandRepository type
type FakeRunningCommandRepository struct {
	mock.Mock
}

type FakeRunningCommandRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *FakeRunningCommandRepository) EXPECT() *FakeRunningCommandRepository_Expecter {
	return &FakeRunningCommandRepository_Expecter{mock: &_m.Mock}
}

// Add provides a mock function with given fields: ctx, cmd
func (_m *FakeRunningCommandRepository) Add(ctx context.Context, cmd command.CancelableCommand) error {
	ret := _m.Called(ctx, cmd)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, command.CancelableCommand) error); ok {
		r0 = rf(ctx, cmd)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FakeRunningCommandRepository_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type FakeRunningCommandRepository_Add_Call struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//   - ctx context.Context
//   - cmd command.CancelableCommand
func (_e *FakeRunningCommandRepository_Expecter) Add(ctx interface{}, cmd interface{}) *FakeRunningCommandRepository_Add_Call {
	return &FakeRunningCommandRepository_Add_Call{Call: _e.mock.On("Add", ctx, cmd)}
}

func (_c *FakeRunningCommandRepository_Add_Call) Run(run func(ctx context.Context, cmd command.CancelableCommand)) *FakeRunningCommandRepository_Add_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(command.CancelableCommand))
	})
	return _c
}

func (_c *FakeRunningCommandRepository_Add_Call) Return(_a0 error) *FakeRunningCommandRepository_Add_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FakeRunningCommandRepository_Add_Call) RunAndReturn(run func(context.Context, command.CancelableCommand) error) *FakeRunningCommandRepository_Add_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx
func (_m *FakeRunningCommandRepository) Get(ctx context.Context) (command.CancelableCommand, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 command.CancelableCommand
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (command.CancelableCommand, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) command.CancelableCommand); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(command.CancelableCommand)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FakeRunningCommandRepository_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type FakeRunningCommandRepository_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
func (_e *FakeRunningCommandRepository_Expecter) Get(ctx interface{}) *FakeRunningCommandRepository_Get_Call {
	return &FakeRunningCommandRepository_Get_Call{Call: _e.mock.On("Get", ctx)}
}

func (_c *FakeRunningCommandRepository_Get_Call) Run(run func(ctx context.Context)) *FakeRunningCommandRepository_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *FakeRunningCommandRepository_Get_Call) Return(_a0 command.CancelableCommand, _a1 error) *FakeRunningCommandRepository_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FakeRunningCommandRepository_Get_Call) RunAndReturn(run func(context.Context) (command.CancelableCommand, error)) *FakeRunningCommandRepository_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Remove provides a mock function with given fields: ctx
func (_m *FakeRunningCommandRepository) Remove(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Remove")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FakeRunningCommandRepository_Remove_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Remove'
type FakeRunningCommandRepository_Remove_Call struct {
	*mock.Call
}

// Remove is a helper method to define mock.On call
//   - ctx context.Context
func (_e *FakeRunningCommandRepository_Expecter) Remove(ctx interface{}) *FakeRunningCommandRepository_Remove_Call {
	return &FakeRunningCommandRepository_Remove_Call{Call: _e.mock.On("Remove", ctx)}
}

func (_c *FakeRunningCommandRepository_Remove_Call) Run(run func(ctx context.Context)) *FakeRunningCommandRepository_Remove_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *FakeRunningCommandRepository_Remove_Call) Return(_a0 error) *FakeRunningCommandRepository_Remove_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FakeRunningCommandRepository_Remove_Call) RunAndReturn(run func(context.Context) error) *FakeRunningCommandRepository_Remove_Call {
	_c.Call.Return(run)
	return _c
}

// NewFakeRunningCommandRepository creates a new instance of FakeRunningCommandRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFakeRunningCommandRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *FakeRunningCommandRepository {
	mock := &FakeRunningCommandRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
