// Code generated by mockery v2.53.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// FakeProcessingLock is an autogenerated mock type for the ProcessingLock type
type FakeProcessingLock struct {
	mock.Mock
}

type FakeProcessingLock_Expecter struct {
	mock *mock.Mock
}

func (_m *FakeProcessingLock) EXPECT() *FakeProcessingLock_Expecter {
	return &FakeProcessingLock_Expecter{mock: &_m.Mock}
}

// Lock provides a mock function with no fields
func (_m *FakeProcessingLock) Lock() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Lock")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FakeProcessingLock_Lock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Lock'
type FakeProcessingLock_Lock_Call struct {
	*mock.Call
}

// Lock is a helper method to define mock.On call
func (_e *FakeProcessingLock_Expecter) Lock() *FakeProcessingLock_Lock_Call {
	return &FakeProcessingLock_Lock_Call{Call: _e.mock.On("Lock")}
}

func (_c *FakeProcessingLock_Lock_Call) Run(run func()) *FakeProcessingLock_Lock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *FakeProcessingLock_Lock_Call) Return(_a0 error) *FakeProcessingLock_Lock_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FakeProcessingLock_Lock_Call) RunAndReturn(run func() error) *FakeProcessingLock_Lock_Call {
	_c.Call.Return(run)
	return _c
}

// Unlock provides a mock function with no fields
func (_m *FakeProcessingLock) Unlock() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Unlock")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FakeProcessingLock_Unlock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Unlock'
type FakeProcessingLock_Unlock_Call struct {
	*mock.Call
}

// Unlock is a helper method to define mock.On call
func (_e *FakeProcessingLock_Expecter) Unlock() *FakeProcessingLock_Unlock_Call {
	return &FakeProcessingLock_Unlock_Call{Call: _e.mock.On("Unlock")}
}

func (_c *FakeProcessingLock_Unlock_Call) Run(run func()) *FakeProcessingLock_Unlock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *FakeProcessingLock_Unlock_Call) Return(_a0 error) *FakeProcessingLock_Unlock_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FakeProcessingLock_Unlock_Call) RunAndReturn(run func() error) *FakeProcessingLock_Unlock_Call {
	_c.Call.Return(run)
	return _c
}

// WaitUntilUnlocked provides a mock function with given fields: ctx
func (_m *FakeProcessingLock) WaitUntilUnlocked(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for WaitUntilUnlocked")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FakeProcessingLock_WaitUntilUnlocked_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaitUntilUnlocked'
type FakeProcessingLock_WaitUntilUnlocked_Call struct {
	*mock.Call
}

// WaitUntilUnlocked is a helper method to define mock.On call
//   - ctx context.Context
func (_e *FakeProcessingLock_Expecter) WaitUntilUnlocked(ctx interface{}) *FakeProcessingLock_WaitUntilUnlocked_Call {
	return &FakeProcessingLock_WaitUntilUnlocked_Call{Call: _e.mock.On("WaitUntilUnlocked", ctx)}
}

func (_c *FakeProcessingLock_WaitUntilUnlocked_Call) Run(run func(ctx context.Context)) *FakeProcessingLock_WaitUntilUnlocked_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *FakeProcessingLock_WaitUntilUnlocked_Call) Return(_a0 error) *FakeProcessingLock_WaitUntilUnlocked_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FakeProcessingLock_WaitUntilUnlocked_Call) RunAndReturn(run func(context.Context) error) *FakeProcessingLock_WaitUntilUnlocked_Call {
	_c.Call.Return(run)
	return _c
}

// WithLock provides a mock function with given fields: fn
func (_m *FakeProcessingLock) WithLock(fn func() error) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for WithLock")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func() error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FakeProcessingLock_WithLock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithLock'
type FakeProcessingLock_WithLock_Call struct {
	*mock.Call
}

// WithLock is a helper method to define mock.On call
//   - fn func() error
func (_e *FakeProcessingLock_Expecter) WithLock(fn interface{}) *FakeProcessingLock_WithLock_Call {
	return &FakeProcessingLock_WithLock_Call{Call: _e.mock.On("WithLock", fn)}
}

func (_c *FakeProcessingLock_WithLock_Call) Run(run func(fn func() error)) *FakeProcessingLock_WithLock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func() error))
	})
	return _c
}

func (_c *FakeProcessingLock_WithLock_Call) Return(_a0 error) *FakeProcessingLock_WithLock_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FakeProcessingLock_WithLock_Call) RunAndReturn(run func(func() error) error) *FakeProcessingLock_WithLock_Call {
	_c.Call.Return(run)
	return _c
}

// NewFakeProcessingLock creates a new instance of FakeProcessingLock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFakeProcessingLock(t interface {
	mock.TestingT
	Cleanup(func())
}) *FakeProcessingLock {
	mock := &FakeProcessingLock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
