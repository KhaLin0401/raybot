// Code generated by mockery v2.53.1. DO NOT EDIT.

package mocks

import (
	context "context"

	command "github.com/tbe-team/raybot/internal/services/command"

	mock "github.com/stretchr/testify/mock"

	paging "github.com/tbe-team/raybot/pkg/paging"
)

// FakeService is an autogenerated mock type for the Service type
type FakeService struct {
	mock.Mock
}

type FakeService_Expecter struct {
	mock *mock.Mock
}

func (_m *FakeService) EXPECT() *FakeService_Expecter {
	return &FakeService_Expecter{mock: &_m.Mock}
}

// CancelActiveCloudCommands provides a mock function with given fields: ctx
func (_m *FakeService) CancelActiveCloudCommands(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for CancelActiveCloudCommands")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FakeService_CancelActiveCloudCommands_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CancelActiveCloudCommands'
type FakeService_CancelActiveCloudCommands_Call struct {
	*mock.Call
}

// CancelActiveCloudCommands is a helper method to define mock.On call
//   - ctx context.Context
func (_e *FakeService_Expecter) CancelActiveCloudCommands(ctx interface{}) *FakeService_CancelActiveCloudCommands_Call {
	return &FakeService_CancelActiveCloudCommands_Call{Call: _e.mock.On("CancelActiveCloudCommands", ctx)}
}

func (_c *FakeService_CancelActiveCloudCommands_Call) Run(run func(ctx context.Context)) *FakeService_CancelActiveCloudCommands_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *FakeService_CancelActiveCloudCommands_Call) Return(_a0 error) *FakeService_CancelActiveCloudCommands_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FakeService_CancelActiveCloudCommands_Call) RunAndReturn(run func(context.Context) error) *FakeService_CancelActiveCloudCommands_Call {
	_c.Call.Return(run)
	return _c
}

// CancelAllRunningCommands provides a mock function with given fields: ctx
func (_m *FakeService) CancelAllRunningCommands(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for CancelAllRunningCommands")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FakeService_CancelAllRunningCommands_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CancelAllRunningCommands'
type FakeService_CancelAllRunningCommands_Call struct {
	*mock.Call
}

// CancelAllRunningCommands is a helper method to define mock.On call
//   - ctx context.Context
func (_e *FakeService_Expecter) CancelAllRunningCommands(ctx interface{}) *FakeService_CancelAllRunningCommands_Call {
	return &FakeService_CancelAllRunningCommands_Call{Call: _e.mock.On("CancelAllRunningCommands", ctx)}
}

func (_c *FakeService_CancelAllRunningCommands_Call) Run(run func(ctx context.Context)) *FakeService_CancelAllRunningCommands_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *FakeService_CancelAllRunningCommands_Call) Return(_a0 error) *FakeService_CancelAllRunningCommands_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FakeService_CancelAllRunningCommands_Call) RunAndReturn(run func(context.Context) error) *FakeService_CancelAllRunningCommands_Call {
	_c.Call.Return(run)
	return _c
}

// CancelCurrentProcessingCommand provides a mock function with given fields: ctx
func (_m *FakeService) CancelCurrentProcessingCommand(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for CancelCurrentProcessingCommand")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FakeService_CancelCurrentProcessingCommand_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CancelCurrentProcessingCommand'
type FakeService_CancelCurrentProcessingCommand_Call struct {
	*mock.Call
}

// CancelCurrentProcessingCommand is a helper method to define mock.On call
//   - ctx context.Context
func (_e *FakeService_Expecter) CancelCurrentProcessingCommand(ctx interface{}) *FakeService_CancelCurrentProcessingCommand_Call {
	return &FakeService_CancelCurrentProcessingCommand_Call{Call: _e.mock.On("CancelCurrentProcessingCommand", ctx)}
}

func (_c *FakeService_CancelCurrentProcessingCommand_Call) Run(run func(ctx context.Context)) *FakeService_CancelCurrentProcessingCommand_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *FakeService_CancelCurrentProcessingCommand_Call) Return(_a0 error) *FakeService_CancelCurrentProcessingCommand_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FakeService_CancelCurrentProcessingCommand_Call) RunAndReturn(run func(context.Context) error) *FakeService_CancelCurrentProcessingCommand_Call {
	_c.Call.Return(run)
	return _c
}

// CreateCommand provides a mock function with given fields: ctx, params
func (_m *FakeService) CreateCommand(ctx context.Context, params command.CreateCommandParams) (command.Command, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for CreateCommand")
	}

	var r0 command.Command
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, command.CreateCommandParams) (command.Command, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, command.CreateCommandParams) command.Command); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Get(0).(command.Command)
	}

	if rf, ok := ret.Get(1).(func(context.Context, command.CreateCommandParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FakeService_CreateCommand_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCommand'
type FakeService_CreateCommand_Call struct {
	*mock.Call
}

// CreateCommand is a helper method to define mock.On call
//   - ctx context.Context
//   - params command.CreateCommandParams
func (_e *FakeService_Expecter) CreateCommand(ctx interface{}, params interface{}) *FakeService_CreateCommand_Call {
	return &FakeService_CreateCommand_Call{Call: _e.mock.On("CreateCommand", ctx, params)}
}

func (_c *FakeService_CreateCommand_Call) Run(run func(ctx context.Context, params command.CreateCommandParams)) *FakeService_CreateCommand_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(command.CreateCommandParams))
	})
	return _c
}

func (_c *FakeService_CreateCommand_Call) Return(_a0 command.Command, _a1 error) *FakeService_CreateCommand_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FakeService_CreateCommand_Call) RunAndReturn(run func(context.Context, command.CreateCommandParams) (command.Command, error)) *FakeService_CreateCommand_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteCommandByID provides a mock function with given fields: ctx, params
func (_m *FakeService) DeleteCommandByID(ctx context.Context, params command.DeleteCommandByIDParams) error {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCommandByID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, command.DeleteCommandByIDParams) error); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FakeService_DeleteCommandByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteCommandByID'
type FakeService_DeleteCommandByID_Call struct {
	*mock.Call
}

// DeleteCommandByID is a helper method to define mock.On call
//   - ctx context.Context
//   - params command.DeleteCommandByIDParams
func (_e *FakeService_Expecter) DeleteCommandByID(ctx interface{}, params interface{}) *FakeService_DeleteCommandByID_Call {
	return &FakeService_DeleteCommandByID_Call{Call: _e.mock.On("DeleteCommandByID", ctx, params)}
}

func (_c *FakeService_DeleteCommandByID_Call) Run(run func(ctx context.Context, params command.DeleteCommandByIDParams)) *FakeService_DeleteCommandByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(command.DeleteCommandByIDParams))
	})
	return _c
}

func (_c *FakeService_DeleteCommandByID_Call) Return(_a0 error) *FakeService_DeleteCommandByID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FakeService_DeleteCommandByID_Call) RunAndReturn(run func(context.Context, command.DeleteCommandByIDParams) error) *FakeService_DeleteCommandByID_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteOldCommands provides a mock function with given fields: ctx
func (_m *FakeService) DeleteOldCommands(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for DeleteOldCommands")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FakeService_DeleteOldCommands_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteOldCommands'
type FakeService_DeleteOldCommands_Call struct {
	*mock.Call
}

// DeleteOldCommands is a helper method to define mock.On call
//   - ctx context.Context
func (_e *FakeService_Expecter) DeleteOldCommands(ctx interface{}) *FakeService_DeleteOldCommands_Call {
	return &FakeService_DeleteOldCommands_Call{Call: _e.mock.On("DeleteOldCommands", ctx)}
}

func (_c *FakeService_DeleteOldCommands_Call) Run(run func(ctx context.Context)) *FakeService_DeleteOldCommands_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *FakeService_DeleteOldCommands_Call) Return(_a0 error) *FakeService_DeleteOldCommands_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FakeService_DeleteOldCommands_Call) RunAndReturn(run func(context.Context) error) *FakeService_DeleteOldCommands_Call {
	_c.Call.Return(run)
	return _c
}

// GetCommandByID provides a mock function with given fields: ctx, params
func (_m *FakeService) GetCommandByID(ctx context.Context, params command.GetCommandByIDParams) (command.Command, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for GetCommandByID")
	}

	var r0 command.Command
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, command.GetCommandByIDParams) (command.Command, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, command.GetCommandByIDParams) command.Command); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Get(0).(command.Command)
	}

	if rf, ok := ret.Get(1).(func(context.Context, command.GetCommandByIDParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FakeService_GetCommandByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCommandByID'
type FakeService_GetCommandByID_Call struct {
	*mock.Call
}

// GetCommandByID is a helper method to define mock.On call
//   - ctx context.Context
//   - params command.GetCommandByIDParams
func (_e *FakeService_Expecter) GetCommandByID(ctx interface{}, params interface{}) *FakeService_GetCommandByID_Call {
	return &FakeService_GetCommandByID_Call{Call: _e.mock.On("GetCommandByID", ctx, params)}
}

func (_c *FakeService_GetCommandByID_Call) Run(run func(ctx context.Context, params command.GetCommandByIDParams)) *FakeService_GetCommandByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(command.GetCommandByIDParams))
	})
	return _c
}

func (_c *FakeService_GetCommandByID_Call) Return(_a0 command.Command, _a1 error) *FakeService_GetCommandByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FakeService_GetCommandByID_Call) RunAndReturn(run func(context.Context, command.GetCommandByIDParams) (command.Command, error)) *FakeService_GetCommandByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetCurrentProcessingCommand provides a mock function with given fields: ctx
func (_m *FakeService) GetCurrentProcessingCommand(ctx context.Context) (command.Command, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetCurrentProcessingCommand")
	}

	var r0 command.Command
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (command.Command, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) command.Command); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(command.Command)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FakeService_GetCurrentProcessingCommand_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCurrentProcessingCommand'
type FakeService_GetCurrentProcessingCommand_Call struct {
	*mock.Call
}

// GetCurrentProcessingCommand is a helper method to define mock.On call
//   - ctx context.Context
func (_e *FakeService_Expecter) GetCurrentProcessingCommand(ctx interface{}) *FakeService_GetCurrentProcessingCommand_Call {
	return &FakeService_GetCurrentProcessingCommand_Call{Call: _e.mock.On("GetCurrentProcessingCommand", ctx)}
}

func (_c *FakeService_GetCurrentProcessingCommand_Call) Run(run func(ctx context.Context)) *FakeService_GetCurrentProcessingCommand_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *FakeService_GetCurrentProcessingCommand_Call) Return(_a0 command.Command, _a1 error) *FakeService_GetCurrentProcessingCommand_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FakeService_GetCurrentProcessingCommand_Call) RunAndReturn(run func(context.Context) (command.Command, error)) *FakeService_GetCurrentProcessingCommand_Call {
	_c.Call.Return(run)
	return _c
}

// ListCommands provides a mock function with given fields: ctx, params
func (_m *FakeService) ListCommands(ctx context.Context, params command.ListCommandsParams) (paging.List[command.Command], error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for ListCommands")
	}

	var r0 paging.List[command.Command]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, command.ListCommandsParams) (paging.List[command.Command], error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, command.ListCommandsParams) paging.List[command.Command]); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Get(0).(paging.List[command.Command])
	}

	if rf, ok := ret.Get(1).(func(context.Context, command.ListCommandsParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FakeService_ListCommands_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListCommands'
type FakeService_ListCommands_Call struct {
	*mock.Call
}

// ListCommands is a helper method to define mock.On call
//   - ctx context.Context
//   - params command.ListCommandsParams
func (_e *FakeService_Expecter) ListCommands(ctx interface{}, params interface{}) *FakeService_ListCommands_Call {
	return &FakeService_ListCommands_Call{Call: _e.mock.On("ListCommands", ctx, params)}
}

func (_c *FakeService_ListCommands_Call) Run(run func(ctx context.Context, params command.ListCommandsParams)) *FakeService_ListCommands_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(command.ListCommandsParams))
	})
	return _c
}

func (_c *FakeService_ListCommands_Call) Return(_a0 paging.List[command.Command], _a1 error) *FakeService_ListCommands_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FakeService_ListCommands_Call) RunAndReturn(run func(context.Context, command.ListCommandsParams) (paging.List[command.Command], error)) *FakeService_ListCommands_Call {
	_c.Call.Return(run)
	return _c
}

// RunNextExecutableCommand provides a mock function with given fields: ctx
func (_m *FakeService) RunNextExecutableCommand(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for RunNextExecutableCommand")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FakeService_RunNextExecutableCommand_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RunNextExecutableCommand'
type FakeService_RunNextExecutableCommand_Call struct {
	*mock.Call
}

// RunNextExecutableCommand is a helper method to define mock.On call
//   - ctx context.Context
func (_e *FakeService_Expecter) RunNextExecutableCommand(ctx interface{}) *FakeService_RunNextExecutableCommand_Call {
	return &FakeService_RunNextExecutableCommand_Call{Call: _e.mock.On("RunNextExecutableCommand", ctx)}
}

func (_c *FakeService_RunNextExecutableCommand_Call) Run(run func(ctx context.Context)) *FakeService_RunNextExecutableCommand_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *FakeService_RunNextExecutableCommand_Call) Return(_a0 error) *FakeService_RunNextExecutableCommand_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FakeService_RunNextExecutableCommand_Call) RunAndReturn(run func(context.Context) error) *FakeService_RunNextExecutableCommand_Call {
	_c.Call.Return(run)
	return _c
}

// NewFakeService creates a new instance of FakeService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFakeService(t interface {
	mock.TestingT
	Cleanup(func())
}) *FakeService {
	mock := &FakeService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
