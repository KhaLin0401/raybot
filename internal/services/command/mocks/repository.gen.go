// Code generated by mockery v2.53.1. DO NOT EDIT.

package mocks

import (
	context "context"

	command "github.com/tbe-team/raybot/internal/services/command"

	mock "github.com/stretchr/testify/mock"

	paging "github.com/tbe-team/raybot/pkg/paging"

	time "time"
)

// FakeRepository is an autogenerated mock type for the Repository type
type FakeRepository struct {
	mock.Mock
}

type FakeRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *FakeRepository) EXPECT() *FakeRepository_Expecter {
	return &FakeRepository_Expecter{mock: &_m.Mock}
}

// CancelPendingCommands provides a mock function with given fields: ctx
func (_m *FakeRepository) CancelPendingCommands(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for CancelPendingCommands")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FakeRepository_CancelPendingCommands_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CancelPendingCommands'
type FakeRepository_CancelPendingCommands_Call struct {
	*mock.Call
}

// CancelPendingCommands is a helper method to define mock.On call
//   - ctx context.Context
func (_e *FakeRepository_Expecter) CancelPendingCommands(ctx interface{}) *FakeRepository_CancelPendingCommands_Call {
	return &FakeRepository_CancelPendingCommands_Call{Call: _e.mock.On("CancelPendingCommands", ctx)}
}

func (_c *FakeRepository_CancelPendingCommands_Call) Run(run func(ctx context.Context)) *FakeRepository_CancelPendingCommands_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *FakeRepository_CancelPendingCommands_Call) Return(_a0 error) *FakeRepository_CancelPendingCommands_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FakeRepository_CancelPendingCommands_Call) RunAndReturn(run func(context.Context) error) *FakeRepository_CancelPendingCommands_Call {
	_c.Call.Return(run)
	return _c
}

// CancelQueuedAndProcessingCommandsCreatedByCloud provides a mock function with given fields: ctx
func (_m *FakeRepository) CancelQueuedAndProcessingCommandsCreatedByCloud(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for CancelQueuedAndProcessingCommandsCreatedByCloud")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FakeRepository_CancelQueuedAndProcessingCommandsCreatedByCloud_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CancelQueuedAndProcessingCommandsCreatedByCloud'
type FakeRepository_CancelQueuedAndProcessingCommandsCreatedByCloud_Call struct {
	*mock.Call
}

// CancelQueuedAndProcessingCommandsCreatedByCloud is a helper method to define mock.On call
//   - ctx context.Context
func (_e *FakeRepository_Expecter) CancelQueuedAndProcessingCommandsCreatedByCloud(ctx interface{}) *FakeRepository_CancelQueuedAndProcessingCommandsCreatedByCloud_Call {
	return &FakeRepository_CancelQueuedAndProcessingCommandsCreatedByCloud_Call{Call: _e.mock.On("CancelQueuedAndProcessingCommandsCreatedByCloud", ctx)}
}

func (_c *FakeRepository_CancelQueuedAndProcessingCommandsCreatedByCloud_Call) Run(run func(ctx context.Context)) *FakeRepository_CancelQueuedAndProcessingCommandsCreatedByCloud_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *FakeRepository_CancelQueuedAndProcessingCommandsCreatedByCloud_Call) Return(_a0 error) *FakeRepository_CancelQueuedAndProcessingCommandsCreatedByCloud_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FakeRepository_CancelQueuedAndProcessingCommandsCreatedByCloud_Call) RunAndReturn(run func(context.Context) error) *FakeRepository_CancelQueuedAndProcessingCommandsCreatedByCloud_Call {
	_c.Call.Return(run)
	return _c
}

// CreateCommand provides a mock function with given fields: ctx, _a1
func (_m *FakeRepository) CreateCommand(ctx context.Context, _a1 command.Command) (command.Command, error) {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreateCommand")
	}

	var r0 command.Command
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, command.Command) (command.Command, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, command.Command) command.Command); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Get(0).(command.Command)
	}

	if rf, ok := ret.Get(1).(func(context.Context, command.Command) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FakeRepository_CreateCommand_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCommand'
type FakeRepository_CreateCommand_Call struct {
	*mock.Call
}

// CreateCommand is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 command.Command
func (_e *FakeRepository_Expecter) CreateCommand(ctx interface{}, _a1 interface{}) *FakeRepository_CreateCommand_Call {
	return &FakeRepository_CreateCommand_Call{Call: _e.mock.On("CreateCommand", ctx, _a1)}
}

func (_c *FakeRepository_CreateCommand_Call) Run(run func(ctx context.Context, _a1 command.Command)) *FakeRepository_CreateCommand_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(command.Command))
	})
	return _c
}

func (_c *FakeRepository_CreateCommand_Call) Return(_a0 command.Command, _a1 error) *FakeRepository_CreateCommand_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FakeRepository_CreateCommand_Call) RunAndReturn(run func(context.Context, command.Command) (command.Command, error)) *FakeRepository_CreateCommand_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteCommandByID provides a mock function with given fields: ctx, id
func (_m *FakeRepository) DeleteCommandByID(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCommandByID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FakeRepository_DeleteCommandByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteCommandByID'
type FakeRepository_DeleteCommandByID_Call struct {
	*mock.Call
}

// DeleteCommandByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *FakeRepository_Expecter) DeleteCommandByID(ctx interface{}, id interface{}) *FakeRepository_DeleteCommandByID_Call {
	return &FakeRepository_DeleteCommandByID_Call{Call: _e.mock.On("DeleteCommandByID", ctx, id)}
}

func (_c *FakeRepository_DeleteCommandByID_Call) Run(run func(ctx context.Context, id int64)) *FakeRepository_DeleteCommandByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *FakeRepository_DeleteCommandByID_Call) Return(_a0 error) *FakeRepository_DeleteCommandByID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FakeRepository_DeleteCommandByID_Call) RunAndReturn(run func(context.Context, int64) error) *FakeRepository_DeleteCommandByID_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteOldCommands provides a mock function with given fields: ctx, cutoffTime
func (_m *FakeRepository) DeleteOldCommands(ctx context.Context, cutoffTime time.Time) error {
	ret := _m.Called(ctx, cutoffTime)

	if len(ret) == 0 {
		panic("no return value specified for DeleteOldCommands")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, time.Time) error); ok {
		r0 = rf(ctx, cutoffTime)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FakeRepository_DeleteOldCommands_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteOldCommands'
type FakeRepository_DeleteOldCommands_Call struct {
	*mock.Call
}

// DeleteOldCommands is a helper method to define mock.On call
//   - ctx context.Context
//   - cutoffTime time.Time
func (_e *FakeRepository_Expecter) DeleteOldCommands(ctx interface{}, cutoffTime interface{}) *FakeRepository_DeleteOldCommands_Call {
	return &FakeRepository_DeleteOldCommands_Call{Call: _e.mock.On("DeleteOldCommands", ctx, cutoffTime)}
}

func (_c *FakeRepository_DeleteOldCommands_Call) Run(run func(ctx context.Context, cutoffTime time.Time)) *FakeRepository_DeleteOldCommands_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(time.Time))
	})
	return _c
}

func (_c *FakeRepository_DeleteOldCommands_Call) Return(_a0 error) *FakeRepository_DeleteOldCommands_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FakeRepository_DeleteOldCommands_Call) RunAndReturn(run func(context.Context, time.Time) error) *FakeRepository_DeleteOldCommands_Call {
	_c.Call.Return(run)
	return _c
}

// GetCommandByID provides a mock function with given fields: ctx, id
func (_m *FakeRepository) GetCommandByID(ctx context.Context, id int64) (command.Command, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetCommandByID")
	}

	var r0 command.Command
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (command.Command, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) command.Command); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(command.Command)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FakeRepository_GetCommandByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCommandByID'
type FakeRepository_GetCommandByID_Call struct {
	*mock.Call
}

// GetCommandByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *FakeRepository_Expecter) GetCommandByID(ctx interface{}, id interface{}) *FakeRepository_GetCommandByID_Call {
	return &FakeRepository_GetCommandByID_Call{Call: _e.mock.On("GetCommandByID", ctx, id)}
}

func (_c *FakeRepository_GetCommandByID_Call) Run(run func(ctx context.Context, id int64)) *FakeRepository_GetCommandByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *FakeRepository_GetCommandByID_Call) Return(_a0 command.Command, _a1 error) *FakeRepository_GetCommandByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FakeRepository_GetCommandByID_Call) RunAndReturn(run func(context.Context, int64) (command.Command, error)) *FakeRepository_GetCommandByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetCurrentProcessingCommand provides a mock function with given fields: ctx
func (_m *FakeRepository) GetCurrentProcessingCommand(ctx context.Context) (command.Command, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetCurrentProcessingCommand")
	}

	var r0 command.Command
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (command.Command, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) command.Command); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(command.Command)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FakeRepository_GetCurrentProcessingCommand_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCurrentProcessingCommand'
type FakeRepository_GetCurrentProcessingCommand_Call struct {
	*mock.Call
}

// GetCurrentProcessingCommand is a helper method to define mock.On call
//   - ctx context.Context
func (_e *FakeRepository_Expecter) GetCurrentProcessingCommand(ctx interface{}) *FakeRepository_GetCurrentProcessingCommand_Call {
	return &FakeRepository_GetCurrentProcessingCommand_Call{Call: _e.mock.On("GetCurrentProcessingCommand", ctx)}
}

func (_c *FakeRepository_GetCurrentProcessingCommand_Call) Run(run func(ctx context.Context)) *FakeRepository_GetCurrentProcessingCommand_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *FakeRepository_GetCurrentProcessingCommand_Call) Return(_a0 command.Command, _a1 error) *FakeRepository_GetCurrentProcessingCommand_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FakeRepository_GetCurrentProcessingCommand_Call) RunAndReturn(run func(context.Context) (command.Command, error)) *FakeRepository_GetCurrentProcessingCommand_Call {
	_c.Call.Return(run)
	return _c
}

// GetNextExecutableCommand provides a mock function with given fields: ctx
func (_m *FakeRepository) GetNextExecutableCommand(ctx context.Context) (command.Command, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetNextExecutableCommand")
	}

	var r0 command.Command
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (command.Command, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) command.Command); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(command.Command)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FakeRepository_GetNextExecutableCommand_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNextExecutableCommand'
type FakeRepository_GetNextExecutableCommand_Call struct {
	*mock.Call
}

// GetNextExecutableCommand is a helper method to define mock.On call
//   - ctx context.Context
func (_e *FakeRepository_Expecter) GetNextExecutableCommand(ctx interface{}) *FakeRepository_GetNextExecutableCommand_Call {
	return &FakeRepository_GetNextExecutableCommand_Call{Call: _e.mock.On("GetNextExecutableCommand", ctx)}
}

func (_c *FakeRepository_GetNextExecutableCommand_Call) Run(run func(ctx context.Context)) *FakeRepository_GetNextExecutableCommand_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *FakeRepository_GetNextExecutableCommand_Call) Return(_a0 command.Command, _a1 error) *FakeRepository_GetNextExecutableCommand_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FakeRepository_GetNextExecutableCommand_Call) RunAndReturn(run func(context.Context) (command.Command, error)) *FakeRepository_GetNextExecutableCommand_Call {
	_c.Call.Return(run)
	return _c
}

// ListCommands provides a mock function with given fields: ctx, params
func (_m *FakeRepository) ListCommands(ctx context.Context, params command.ListCommandsParams) (paging.List[command.Command], error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for ListCommands")
	}

	var r0 paging.List[command.Command]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, command.ListCommandsParams) (paging.List[command.Command], error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, command.ListCommandsParams) paging.List[command.Command]); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Get(0).(paging.List[command.Command])
	}

	if rf, ok := ret.Get(1).(func(context.Context, command.ListCommandsParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FakeRepository_ListCommands_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListCommands'
type FakeRepository_ListCommands_Call struct {
	*mock.Call
}

// ListCommands is a helper method to define mock.On call
//   - ctx context.Context
//   - params command.ListCommandsParams
func (_e *FakeRepository_Expecter) ListCommands(ctx interface{}, params interface{}) *FakeRepository_ListCommands_Call {
	return &FakeRepository_ListCommands_Call{Call: _e.mock.On("ListCommands", ctx, params)}
}

func (_c *FakeRepository_ListCommands_Call) Run(run func(ctx context.Context, params command.ListCommandsParams)) *FakeRepository_ListCommands_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(command.ListCommandsParams))
	})
	return _c
}

func (_c *FakeRepository_ListCommands_Call) Return(_a0 paging.List[command.Command], _a1 error) *FakeRepository_ListCommands_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FakeRepository_ListCommands_Call) RunAndReturn(run func(context.Context, command.ListCommandsParams) (paging.List[command.Command], error)) *FakeRepository_ListCommands_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateCommand provides a mock function with given fields: ctx, params
func (_m *FakeRepository) UpdateCommand(ctx context.Context, params command.UpdateCommandParams) (command.Command, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCommand")
	}

	var r0 command.Command
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, command.UpdateCommandParams) (command.Command, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, command.UpdateCommandParams) command.Command); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Get(0).(command.Command)
	}

	if rf, ok := ret.Get(1).(func(context.Context, command.UpdateCommandParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FakeRepository_UpdateCommand_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateCommand'
type FakeRepository_UpdateCommand_Call struct {
	*mock.Call
}

// UpdateCommand is a helper method to define mock.On call
//   - ctx context.Context
//   - params command.UpdateCommandParams
func (_e *FakeRepository_Expecter) UpdateCommand(ctx interface{}, params interface{}) *FakeRepository_UpdateCommand_Call {
	return &FakeRepository_UpdateCommand_Call{Call: _e.mock.On("UpdateCommand", ctx, params)}
}

func (_c *FakeRepository_UpdateCommand_Call) Run(run func(ctx context.Context, params command.UpdateCommandParams)) *FakeRepository_UpdateCommand_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(command.UpdateCommandParams))
	})
	return _c
}

func (_c *FakeRepository_UpdateCommand_Call) Return(_a0 command.Command, _a1 error) *FakeRepository_UpdateCommand_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FakeRepository_UpdateCommand_Call) RunAndReturn(run func(context.Context, command.UpdateCommandParams) (command.Command, error)) *FakeRepository_UpdateCommand_Call {
	_c.Call.Return(run)
	return _c
}

// NewFakeRepository creates a new instance of FakeRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFakeRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *FakeRepository {
	mock := &FakeRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
