// Code generated by mockery v2.53.1. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	service "github.com/tbe-team/raybot/internal/service"
)

// FakeService is an autogenerated mock type for the Service type
type FakeService struct {
	mock.Mock
}

type FakeService_Expecter struct {
	mock *mock.Mock
}

func (_m *FakeService) EXPECT() *FakeService_Expecter {
	return &FakeService_Expecter{mock: &_m.Mock}
}

// CargoControlService provides a mock function with no fields
func (_m *FakeService) CargoControlService() service.CargoControlService {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CargoControlService")
	}

	var r0 service.CargoControlService
	if rf, ok := ret.Get(0).(func() service.CargoControlService); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(service.CargoControlService)
		}
	}

	return r0
}

// FakeService_CargoControlService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CargoControlService'
type FakeService_CargoControlService_Call struct {
	*mock.Call
}

// CargoControlService is a helper method to define mock.On call
func (_e *FakeService_Expecter) CargoControlService() *FakeService_CargoControlService_Call {
	return &FakeService_CargoControlService_Call{Call: _e.mock.On("CargoControlService")}
}

func (_c *FakeService_CargoControlService_Call) Run(run func()) *FakeService_CargoControlService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *FakeService_CargoControlService_Call) Return(_a0 service.CargoControlService) *FakeService_CargoControlService_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FakeService_CargoControlService_Call) RunAndReturn(run func() service.CargoControlService) *FakeService_CargoControlService_Call {
	_c.Call.Return(run)
	return _c
}

// CommandService provides a mock function with no fields
func (_m *FakeService) CommandService() service.CommandService {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CommandService")
	}

	var r0 service.CommandService
	if rf, ok := ret.Get(0).(func() service.CommandService); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(service.CommandService)
		}
	}

	return r0
}

// FakeService_CommandService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CommandService'
type FakeService_CommandService_Call struct {
	*mock.Call
}

// CommandService is a helper method to define mock.On call
func (_e *FakeService_Expecter) CommandService() *FakeService_CommandService_Call {
	return &FakeService_CommandService_Call{Call: _e.mock.On("CommandService")}
}

func (_c *FakeService_CommandService_Call) Run(run func()) *FakeService_CommandService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *FakeService_CommandService_Call) Return(_a0 service.CommandService) *FakeService_CommandService_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FakeService_CommandService_Call) RunAndReturn(run func() service.CommandService) *FakeService_CommandService_Call {
	_c.Call.Return(run)
	return _c
}

// LocationService provides a mock function with no fields
func (_m *FakeService) LocationService() service.LocationService {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for LocationService")
	}

	var r0 service.LocationService
	if rf, ok := ret.Get(0).(func() service.LocationService); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(service.LocationService)
		}
	}

	return r0
}

// FakeService_LocationService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LocationService'
type FakeService_LocationService_Call struct {
	*mock.Call
}

// LocationService is a helper method to define mock.On call
func (_e *FakeService_Expecter) LocationService() *FakeService_LocationService_Call {
	return &FakeService_LocationService_Call{Call: _e.mock.On("LocationService")}
}

func (_c *FakeService_LocationService_Call) Run(run func()) *FakeService_LocationService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *FakeService_LocationService_Call) Return(_a0 service.LocationService) *FakeService_LocationService_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FakeService_LocationService_Call) RunAndReturn(run func() service.LocationService) *FakeService_LocationService_Call {
	_c.Call.Return(run)
	return _c
}

// PICService provides a mock function with no fields
func (_m *FakeService) PICService() service.PICService {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for PICService")
	}

	var r0 service.PICService
	if rf, ok := ret.Get(0).(func() service.PICService); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(service.PICService)
		}
	}

	return r0
}

// FakeService_PICService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PICService'
type FakeService_PICService_Call struct {
	*mock.Call
}

// PICService is a helper method to define mock.On call
func (_e *FakeService_Expecter) PICService() *FakeService_PICService_Call {
	return &FakeService_PICService_Call{Call: _e.mock.On("PICService")}
}

func (_c *FakeService_PICService_Call) Run(run func()) *FakeService_PICService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *FakeService_PICService_Call) Return(_a0 service.PICService) *FakeService_PICService_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FakeService_PICService_Call) RunAndReturn(run func() service.PICService) *FakeService_PICService_Call {
	_c.Call.Return(run)
	return _c
}

// RobotStateService provides a mock function with no fields
func (_m *FakeService) RobotStateService() service.RobotStateService {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for RobotStateService")
	}

	var r0 service.RobotStateService
	if rf, ok := ret.Get(0).(func() service.RobotStateService); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(service.RobotStateService)
		}
	}

	return r0
}

// FakeService_RobotStateService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RobotStateService'
type FakeService_RobotStateService_Call struct {
	*mock.Call
}

// RobotStateService is a helper method to define mock.On call
func (_e *FakeService_Expecter) RobotStateService() *FakeService_RobotStateService_Call {
	return &FakeService_RobotStateService_Call{Call: _e.mock.On("RobotStateService")}
}

func (_c *FakeService_RobotStateService_Call) Run(run func()) *FakeService_RobotStateService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *FakeService_RobotStateService_Call) Return(_a0 service.RobotStateService) *FakeService_RobotStateService_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FakeService_RobotStateService_Call) RunAndReturn(run func() service.RobotStateService) *FakeService_RobotStateService_Call {
	_c.Call.Return(run)
	return _c
}

// SystemService provides a mock function with no fields
func (_m *FakeService) SystemService() service.SystemService {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for SystemService")
	}

	var r0 service.SystemService
	if rf, ok := ret.Get(0).(func() service.SystemService); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(service.SystemService)
		}
	}

	return r0
}

// FakeService_SystemService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SystemService'
type FakeService_SystemService_Call struct {
	*mock.Call
}

// SystemService is a helper method to define mock.On call
func (_e *FakeService_Expecter) SystemService() *FakeService_SystemService_Call {
	return &FakeService_SystemService_Call{Call: _e.mock.On("SystemService")}
}

func (_c *FakeService_SystemService_Call) Run(run func()) *FakeService_SystemService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *FakeService_SystemService_Call) Return(_a0 service.SystemService) *FakeService_SystemService_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FakeService_SystemService_Call) RunAndReturn(run func() service.SystemService) *FakeService_SystemService_Call {
	_c.Call.Return(run)
	return _c
}

// NewFakeService creates a new instance of FakeService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFakeService(t interface {
	mock.TestingT
	Cleanup(func())
}) *FakeService {
	mock := &FakeService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
