// Code generated by mockery v2.53.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	service "github.com/tbe-team/raybot/internal/service"
)

// FakeLocationService is an autogenerated mock type for the LocationService type
type FakeLocationService struct {
	mock.Mock
}

type FakeLocationService_Expecter struct {
	mock *mock.Mock
}

func (_m *FakeLocationService) EXPECT() *FakeLocationService_Expecter {
	return &FakeLocationService_Expecter{mock: &_m.Mock}
}

// UpdateLocation provides a mock function with given fields: ctx, params
func (_m *FakeLocationService) UpdateLocation(ctx context.Context, params service.UpdateLocationParams) error {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for UpdateLocation")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, service.UpdateLocationParams) error); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FakeLocationService_UpdateLocation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateLocation'
type FakeLocationService_UpdateLocation_Call struct {
	*mock.Call
}

// UpdateLocation is a helper method to define mock.On call
//   - ctx context.Context
//   - params service.UpdateLocationParams
func (_e *FakeLocationService_Expecter) UpdateLocation(ctx interface{}, params interface{}) *FakeLocationService_UpdateLocation_Call {
	return &FakeLocationService_UpdateLocation_Call{Call: _e.mock.On("UpdateLocation", ctx, params)}
}

func (_c *FakeLocationService_UpdateLocation_Call) Run(run func(ctx context.Context, params service.UpdateLocationParams)) *FakeLocationService_UpdateLocation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(service.UpdateLocationParams))
	})
	return _c
}

func (_c *FakeLocationService_UpdateLocation_Call) Return(_a0 error) *FakeLocationService_UpdateLocation_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FakeLocationService_UpdateLocation_Call) RunAndReturn(run func(context.Context, service.UpdateLocationParams) error) *FakeLocationService_UpdateLocation_Call {
	_c.Call.Return(run)
	return _c
}

// NewFakeLocationService creates a new instance of FakeLocationService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFakeLocationService(t interface {
	mock.TestingT
	Cleanup(func())
}) *FakeLocationService {
	mock := &FakeLocationService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
