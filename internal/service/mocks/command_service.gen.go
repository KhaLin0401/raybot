// Code generated by mockery v2.53.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	model "github.com/tbe-team/raybot/internal/model"

	paging "github.com/tbe-team/raybot/pkg/paging"

	service "github.com/tbe-team/raybot/internal/service"
)

// FakeCommandService is an autogenerated mock type for the CommandService type
type FakeCommandService struct {
	mock.Mock
}

type FakeCommandService_Expecter struct {
	mock *mock.Mock
}

func (_m *FakeCommandService) EXPECT() *FakeCommandService_Expecter {
	return &FakeCommandService_Expecter{mock: &_m.Mock}
}

// CreateCommand provides a mock function with given fields: ctx, params
func (_m *FakeCommandService) CreateCommand(ctx context.Context, params service.CreateCommandParams) (model.Command, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for CreateCommand")
	}

	var r0 model.Command
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, service.CreateCommandParams) (model.Command, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, service.CreateCommandParams) model.Command); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Get(0).(model.Command)
	}

	if rf, ok := ret.Get(1).(func(context.Context, service.CreateCommandParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FakeCommandService_CreateCommand_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCommand'
type FakeCommandService_CreateCommand_Call struct {
	*mock.Call
}

// CreateCommand is a helper method to define mock.On call
//   - ctx context.Context
//   - params service.CreateCommandParams
func (_e *FakeCommandService_Expecter) CreateCommand(ctx interface{}, params interface{}) *FakeCommandService_CreateCommand_Call {
	return &FakeCommandService_CreateCommand_Call{Call: _e.mock.On("CreateCommand", ctx, params)}
}

func (_c *FakeCommandService_CreateCommand_Call) Run(run func(ctx context.Context, params service.CreateCommandParams)) *FakeCommandService_CreateCommand_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(service.CreateCommandParams))
	})
	return _c
}

func (_c *FakeCommandService_CreateCommand_Call) Return(_a0 model.Command, _a1 error) *FakeCommandService_CreateCommand_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FakeCommandService_CreateCommand_Call) RunAndReturn(run func(context.Context, service.CreateCommandParams) (model.Command, error)) *FakeCommandService_CreateCommand_Call {
	_c.Call.Return(run)
	return _c
}

// ExecuteInProgressCommand provides a mock function with given fields: ctx
func (_m *FakeCommandService) ExecuteInProgressCommand(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ExecuteInProgressCommand")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FakeCommandService_ExecuteInProgressCommand_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecuteInProgressCommand'
type FakeCommandService_ExecuteInProgressCommand_Call struct {
	*mock.Call
}

// ExecuteInProgressCommand is a helper method to define mock.On call
//   - ctx context.Context
func (_e *FakeCommandService_Expecter) ExecuteInProgressCommand(ctx interface{}) *FakeCommandService_ExecuteInProgressCommand_Call {
	return &FakeCommandService_ExecuteInProgressCommand_Call{Call: _e.mock.On("ExecuteInProgressCommand", ctx)}
}

func (_c *FakeCommandService_ExecuteInProgressCommand_Call) Run(run func(ctx context.Context)) *FakeCommandService_ExecuteInProgressCommand_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *FakeCommandService_ExecuteInProgressCommand_Call) Return(_a0 error) *FakeCommandService_ExecuteInProgressCommand_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FakeCommandService_ExecuteInProgressCommand_Call) RunAndReturn(run func(context.Context) error) *FakeCommandService_ExecuteInProgressCommand_Call {
	_c.Call.Return(run)
	return _c
}

// GetCurrentProcessingCommand provides a mock function with given fields: ctx
func (_m *FakeCommandService) GetCurrentProcessingCommand(ctx context.Context) (model.Command, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetCurrentProcessingCommand")
	}

	var r0 model.Command
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (model.Command, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) model.Command); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(model.Command)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FakeCommandService_GetCurrentProcessingCommand_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCurrentProcessingCommand'
type FakeCommandService_GetCurrentProcessingCommand_Call struct {
	*mock.Call
}

// GetCurrentProcessingCommand is a helper method to define mock.On call
//   - ctx context.Context
func (_e *FakeCommandService_Expecter) GetCurrentProcessingCommand(ctx interface{}) *FakeCommandService_GetCurrentProcessingCommand_Call {
	return &FakeCommandService_GetCurrentProcessingCommand_Call{Call: _e.mock.On("GetCurrentProcessingCommand", ctx)}
}

func (_c *FakeCommandService_GetCurrentProcessingCommand_Call) Run(run func(ctx context.Context)) *FakeCommandService_GetCurrentProcessingCommand_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *FakeCommandService_GetCurrentProcessingCommand_Call) Return(_a0 model.Command, _a1 error) *FakeCommandService_GetCurrentProcessingCommand_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FakeCommandService_GetCurrentProcessingCommand_Call) RunAndReturn(run func(context.Context) (model.Command, error)) *FakeCommandService_GetCurrentProcessingCommand_Call {
	_c.Call.Return(run)
	return _c
}

// ListCommands provides a mock function with given fields: ctx, params
func (_m *FakeCommandService) ListCommands(ctx context.Context, params service.ListCommandsParams) (paging.List[model.Command], error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for ListCommands")
	}

	var r0 paging.List[model.Command]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, service.ListCommandsParams) (paging.List[model.Command], error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, service.ListCommandsParams) paging.List[model.Command]); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Get(0).(paging.List[model.Command])
	}

	if rf, ok := ret.Get(1).(func(context.Context, service.ListCommandsParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FakeCommandService_ListCommands_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListCommands'
type FakeCommandService_ListCommands_Call struct {
	*mock.Call
}

// ListCommands is a helper method to define mock.On call
//   - ctx context.Context
//   - params service.ListCommandsParams
func (_e *FakeCommandService_Expecter) ListCommands(ctx interface{}, params interface{}) *FakeCommandService_ListCommands_Call {
	return &FakeCommandService_ListCommands_Call{Call: _e.mock.On("ListCommands", ctx, params)}
}

func (_c *FakeCommandService_ListCommands_Call) Run(run func(ctx context.Context, params service.ListCommandsParams)) *FakeCommandService_ListCommands_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(service.ListCommandsParams))
	})
	return _c
}

func (_c *FakeCommandService_ListCommands_Call) Return(_a0 paging.List[model.Command], _a1 error) *FakeCommandService_ListCommands_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FakeCommandService_ListCommands_Call) RunAndReturn(run func(context.Context, service.ListCommandsParams) (paging.List[model.Command], error)) *FakeCommandService_ListCommands_Call {
	_c.Call.Return(run)
	return _c
}

// NewFakeCommandService creates a new instance of FakeCommandService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFakeCommandService(t interface {
	mock.TestingT
	Cleanup(func())
}) *FakeCommandService {
	mock := &FakeCommandService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
