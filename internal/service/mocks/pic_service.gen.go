// Code generated by mockery v2.53.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	service "github.com/tbe-team/raybot/internal/service"
)

// FakePICService is an autogenerated mock type for the PICService type
type FakePICService struct {
	mock.Mock
}

type FakePICService_Expecter struct {
	mock *mock.Mock
}

func (_m *FakePICService) EXPECT() *FakePICService_Expecter {
	return &FakePICService_Expecter{mock: &_m.Mock}
}

// CreateSerialCommand provides a mock function with given fields: ctx, params
func (_m *FakePICService) CreateSerialCommand(ctx context.Context, params service.CreateSerialCommandParams) error {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for CreateSerialCommand")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, service.CreateSerialCommandParams) error); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FakePICService_CreateSerialCommand_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSerialCommand'
type FakePICService_CreateSerialCommand_Call struct {
	*mock.Call
}

// CreateSerialCommand is a helper method to define mock.On call
//   - ctx context.Context
//   - params service.CreateSerialCommandParams
func (_e *FakePICService_Expecter) CreateSerialCommand(ctx interface{}, params interface{}) *FakePICService_CreateSerialCommand_Call {
	return &FakePICService_CreateSerialCommand_Call{Call: _e.mock.On("CreateSerialCommand", ctx, params)}
}

func (_c *FakePICService_CreateSerialCommand_Call) Run(run func(ctx context.Context, params service.CreateSerialCommandParams)) *FakePICService_CreateSerialCommand_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(service.CreateSerialCommandParams))
	})
	return _c
}

func (_c *FakePICService_CreateSerialCommand_Call) Return(_a0 error) *FakePICService_CreateSerialCommand_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FakePICService_CreateSerialCommand_Call) RunAndReturn(run func(context.Context, service.CreateSerialCommandParams) error) *FakePICService_CreateSerialCommand_Call {
	_c.Call.Return(run)
	return _c
}

// ProcessSerialCommandACK provides a mock function with given fields: ctx, params
func (_m *FakePICService) ProcessSerialCommandACK(ctx context.Context, params service.ProcessSerialCommandACKParams) error {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for ProcessSerialCommandACK")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, service.ProcessSerialCommandACKParams) error); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FakePICService_ProcessSerialCommandACK_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessSerialCommandACK'
type FakePICService_ProcessSerialCommandACK_Call struct {
	*mock.Call
}

// ProcessSerialCommandACK is a helper method to define mock.On call
//   - ctx context.Context
//   - params service.ProcessSerialCommandACKParams
func (_e *FakePICService_Expecter) ProcessSerialCommandACK(ctx interface{}, params interface{}) *FakePICService_ProcessSerialCommandACK_Call {
	return &FakePICService_ProcessSerialCommandACK_Call{Call: _e.mock.On("ProcessSerialCommandACK", ctx, params)}
}

func (_c *FakePICService_ProcessSerialCommandACK_Call) Run(run func(ctx context.Context, params service.ProcessSerialCommandACKParams)) *FakePICService_ProcessSerialCommandACK_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(service.ProcessSerialCommandACKParams))
	})
	return _c
}

func (_c *FakePICService_ProcessSerialCommandACK_Call) Return(_a0 error) *FakePICService_ProcessSerialCommandACK_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FakePICService_ProcessSerialCommandACK_Call) RunAndReturn(run func(context.Context, service.ProcessSerialCommandACKParams) error) *FakePICService_ProcessSerialCommandACK_Call {
	_c.Call.Return(run)
	return _c
}

// ProcessSyncState provides a mock function with given fields: ctx, params
func (_m *FakePICService) ProcessSyncState(ctx context.Context, params service.ProcessSyncStateParams) error {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for ProcessSyncState")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, service.ProcessSyncStateParams) error); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FakePICService_ProcessSyncState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessSyncState'
type FakePICService_ProcessSyncState_Call struct {
	*mock.Call
}

// ProcessSyncState is a helper method to define mock.On call
//   - ctx context.Context
//   - params service.ProcessSyncStateParams
func (_e *FakePICService_Expecter) ProcessSyncState(ctx interface{}, params interface{}) *FakePICService_ProcessSyncState_Call {
	return &FakePICService_ProcessSyncState_Call{Call: _e.mock.On("ProcessSyncState", ctx, params)}
}

func (_c *FakePICService_ProcessSyncState_Call) Run(run func(ctx context.Context, params service.ProcessSyncStateParams)) *FakePICService_ProcessSyncState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(service.ProcessSyncStateParams))
	})
	return _c
}

func (_c *FakePICService_ProcessSyncState_Call) Return(_a0 error) *FakePICService_ProcessSyncState_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FakePICService_ProcessSyncState_Call) RunAndReturn(run func(context.Context, service.ProcessSyncStateParams) error) *FakePICService_ProcessSyncState_Call {
	_c.Call.Return(run)
	return _c
}

// NewFakePICService creates a new instance of FakePICService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFakePICService(t interface {
	mock.TestingT
	Cleanup(func())
}) *FakePICService {
	mock := &FakePICService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
