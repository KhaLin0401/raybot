// Code generated by mockery v2.53.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	service "github.com/tbe-team/raybot/internal/service"
)

// FakeCargoControlService is an autogenerated mock type for the CargoControlService type
type FakeCargoControlService struct {
	mock.Mock
}

type FakeCargoControlService_Expecter struct {
	mock *mock.Mock
}

func (_m *FakeCargoControlService) EXPECT() *FakeCargoControlService_Expecter {
	return &FakeCargoControlService_Expecter{mock: &_m.Mock}
}

// CloseCargoDoor provides a mock function with given fields: ctx
func (_m *FakeCargoControlService) CloseCargoDoor(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for CloseCargoDoor")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FakeCargoControlService_CloseCargoDoor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CloseCargoDoor'
type FakeCargoControlService_CloseCargoDoor_Call struct {
	*mock.Call
}

// CloseCargoDoor is a helper method to define mock.On call
//   - ctx context.Context
func (_e *FakeCargoControlService_Expecter) CloseCargoDoor(ctx interface{}) *FakeCargoControlService_CloseCargoDoor_Call {
	return &FakeCargoControlService_CloseCargoDoor_Call{Call: _e.mock.On("CloseCargoDoor", ctx)}
}

func (_c *FakeCargoControlService_CloseCargoDoor_Call) Run(run func(ctx context.Context)) *FakeCargoControlService_CloseCargoDoor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *FakeCargoControlService_CloseCargoDoor_Call) Return(_a0 error) *FakeCargoControlService_CloseCargoDoor_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FakeCargoControlService_CloseCargoDoor_Call) RunAndReturn(run func(context.Context) error) *FakeCargoControlService_CloseCargoDoor_Call {
	_c.Call.Return(run)
	return _c
}

// OpenCargoDoor provides a mock function with given fields: ctx
func (_m *FakeCargoControlService) OpenCargoDoor(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for OpenCargoDoor")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FakeCargoControlService_OpenCargoDoor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OpenCargoDoor'
type FakeCargoControlService_OpenCargoDoor_Call struct {
	*mock.Call
}

// OpenCargoDoor is a helper method to define mock.On call
//   - ctx context.Context
func (_e *FakeCargoControlService_Expecter) OpenCargoDoor(ctx interface{}) *FakeCargoControlService_OpenCargoDoor_Call {
	return &FakeCargoControlService_OpenCargoDoor_Call{Call: _e.mock.On("OpenCargoDoor", ctx)}
}

func (_c *FakeCargoControlService_OpenCargoDoor_Call) Run(run func(ctx context.Context)) *FakeCargoControlService_OpenCargoDoor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *FakeCargoControlService_OpenCargoDoor_Call) Return(_a0 error) *FakeCargoControlService_OpenCargoDoor_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FakeCargoControlService_OpenCargoDoor_Call) RunAndReturn(run func(context.Context) error) *FakeCargoControlService_OpenCargoDoor_Call {
	_c.Call.Return(run)
	return _c
}

// ProcessESPSerialCommandACK provides a mock function with given fields: ctx, params
func (_m *FakeCargoControlService) ProcessESPSerialCommandACK(ctx context.Context, params service.ProcessESPSerialCommandACKParams) error {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for ProcessESPSerialCommandACK")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, service.ProcessESPSerialCommandACKParams) error); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FakeCargoControlService_ProcessESPSerialCommandACK_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessESPSerialCommandACK'
type FakeCargoControlService_ProcessESPSerialCommandACK_Call struct {
	*mock.Call
}

// ProcessESPSerialCommandACK is a helper method to define mock.On call
//   - ctx context.Context
//   - params service.ProcessESPSerialCommandACKParams
func (_e *FakeCargoControlService_Expecter) ProcessESPSerialCommandACK(ctx interface{}, params interface{}) *FakeCargoControlService_ProcessESPSerialCommandACK_Call {
	return &FakeCargoControlService_ProcessESPSerialCommandACK_Call{Call: _e.mock.On("ProcessESPSerialCommandACK", ctx, params)}
}

func (_c *FakeCargoControlService_ProcessESPSerialCommandACK_Call) Run(run func(ctx context.Context, params service.ProcessESPSerialCommandACKParams)) *FakeCargoControlService_ProcessESPSerialCommandACK_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(service.ProcessESPSerialCommandACKParams))
	})
	return _c
}

func (_c *FakeCargoControlService_ProcessESPSerialCommandACK_Call) Return(_a0 error) *FakeCargoControlService_ProcessESPSerialCommandACK_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FakeCargoControlService_ProcessESPSerialCommandACK_Call) RunAndReturn(run func(context.Context, service.ProcessESPSerialCommandACKParams) error) *FakeCargoControlService_ProcessESPSerialCommandACK_Call {
	_c.Call.Return(run)
	return _c
}

// SyncCargoBottomDistance provides a mock function with given fields: ctx, params
func (_m *FakeCargoControlService) SyncCargoBottomDistance(ctx context.Context, params service.SyncCargoBottomDistanceParams) error {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for SyncCargoBottomDistance")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, service.SyncCargoBottomDistanceParams) error); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FakeCargoControlService_SyncCargoBottomDistance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SyncCargoBottomDistance'
type FakeCargoControlService_SyncCargoBottomDistance_Call struct {
	*mock.Call
}

// SyncCargoBottomDistance is a helper method to define mock.On call
//   - ctx context.Context
//   - params service.SyncCargoBottomDistanceParams
func (_e *FakeCargoControlService_Expecter) SyncCargoBottomDistance(ctx interface{}, params interface{}) *FakeCargoControlService_SyncCargoBottomDistance_Call {
	return &FakeCargoControlService_SyncCargoBottomDistance_Call{Call: _e.mock.On("SyncCargoBottomDistance", ctx, params)}
}

func (_c *FakeCargoControlService_SyncCargoBottomDistance_Call) Run(run func(ctx context.Context, params service.SyncCargoBottomDistanceParams)) *FakeCargoControlService_SyncCargoBottomDistance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(service.SyncCargoBottomDistanceParams))
	})
	return _c
}

func (_c *FakeCargoControlService_SyncCargoBottomDistance_Call) Return(_a0 error) *FakeCargoControlService_SyncCargoBottomDistance_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FakeCargoControlService_SyncCargoBottomDistance_Call) RunAndReturn(run func(context.Context, service.SyncCargoBottomDistanceParams) error) *FakeCargoControlService_SyncCargoBottomDistance_Call {
	_c.Call.Return(run)
	return _c
}

// SyncCargoDoorMotorState provides a mock function with given fields: ctx, params
func (_m *FakeCargoControlService) SyncCargoDoorMotorState(ctx context.Context, params service.SyncCargoDoorMotorStateParams) error {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for SyncCargoDoorMotorState")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, service.SyncCargoDoorMotorStateParams) error); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FakeCargoControlService_SyncCargoDoorMotorState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SyncCargoDoorMotorState'
type FakeCargoControlService_SyncCargoDoorMotorState_Call struct {
	*mock.Call
}

// SyncCargoDoorMotorState is a helper method to define mock.On call
//   - ctx context.Context
//   - params service.SyncCargoDoorMotorStateParams
func (_e *FakeCargoControlService_Expecter) SyncCargoDoorMotorState(ctx interface{}, params interface{}) *FakeCargoControlService_SyncCargoDoorMotorState_Call {
	return &FakeCargoControlService_SyncCargoDoorMotorState_Call{Call: _e.mock.On("SyncCargoDoorMotorState", ctx, params)}
}

func (_c *FakeCargoControlService_SyncCargoDoorMotorState_Call) Run(run func(ctx context.Context, params service.SyncCargoDoorMotorStateParams)) *FakeCargoControlService_SyncCargoDoorMotorState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(service.SyncCargoDoorMotorStateParams))
	})
	return _c
}

func (_c *FakeCargoControlService_SyncCargoDoorMotorState_Call) Return(_a0 error) *FakeCargoControlService_SyncCargoDoorMotorState_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FakeCargoControlService_SyncCargoDoorMotorState_Call) RunAndReturn(run func(context.Context, service.SyncCargoDoorMotorStateParams) error) *FakeCargoControlService_SyncCargoDoorMotorState_Call {
	_c.Call.Return(run)
	return _c
}

// SyncCargoDoorState provides a mock function with given fields: ctx, params
func (_m *FakeCargoControlService) SyncCargoDoorState(ctx context.Context, params service.SyncCargoDoorStateParams) error {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for SyncCargoDoorState")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, service.SyncCargoDoorStateParams) error); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FakeCargoControlService_SyncCargoDoorState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SyncCargoDoorState'
type FakeCargoControlService_SyncCargoDoorState_Call struct {
	*mock.Call
}

// SyncCargoDoorState is a helper method to define mock.On call
//   - ctx context.Context
//   - params service.SyncCargoDoorStateParams
func (_e *FakeCargoControlService_Expecter) SyncCargoDoorState(ctx interface{}, params interface{}) *FakeCargoControlService_SyncCargoDoorState_Call {
	return &FakeCargoControlService_SyncCargoDoorState_Call{Call: _e.mock.On("SyncCargoDoorState", ctx, params)}
}

func (_c *FakeCargoControlService_SyncCargoDoorState_Call) Run(run func(ctx context.Context, params service.SyncCargoDoorStateParams)) *FakeCargoControlService_SyncCargoDoorState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(service.SyncCargoDoorStateParams))
	})
	return _c
}

func (_c *FakeCargoControlService_SyncCargoDoorState_Call) Return(_a0 error) *FakeCargoControlService_SyncCargoDoorState_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FakeCargoControlService_SyncCargoDoorState_Call) RunAndReturn(run func(context.Context, service.SyncCargoDoorStateParams) error) *FakeCargoControlService_SyncCargoDoorState_Call {
	_c.Call.Return(run)
	return _c
}

// SyncCargoQRCode provides a mock function with given fields: ctx, params
func (_m *FakeCargoControlService) SyncCargoQRCode(ctx context.Context, params service.SyncCargoQRCodeParams) error {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for SyncCargoQRCode")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, service.SyncCargoQRCodeParams) error); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FakeCargoControlService_SyncCargoQRCode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SyncCargoQRCode'
type FakeCargoControlService_SyncCargoQRCode_Call struct {
	*mock.Call
}

// SyncCargoQRCode is a helper method to define mock.On call
//   - ctx context.Context
//   - params service.SyncCargoQRCodeParams
func (_e *FakeCargoControlService_Expecter) SyncCargoQRCode(ctx interface{}, params interface{}) *FakeCargoControlService_SyncCargoQRCode_Call {
	return &FakeCargoControlService_SyncCargoQRCode_Call{Call: _e.mock.On("SyncCargoQRCode", ctx, params)}
}

func (_c *FakeCargoControlService_SyncCargoQRCode_Call) Run(run func(ctx context.Context, params service.SyncCargoQRCodeParams)) *FakeCargoControlService_SyncCargoQRCode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(service.SyncCargoQRCodeParams))
	})
	return _c
}

func (_c *FakeCargoControlService_SyncCargoQRCode_Call) Return(_a0 error) *FakeCargoControlService_SyncCargoQRCode_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FakeCargoControlService_SyncCargoQRCode_Call) RunAndReturn(run func(context.Context, service.SyncCargoQRCodeParams) error) *FakeCargoControlService_SyncCargoQRCode_Call {
	_c.Call.Return(run)
	return _c
}

// NewFakeCargoControlService creates a new instance of FakeCargoControlService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFakeCargoControlService(t interface {
	mock.TestingT
	Cleanup(func())
}) *FakeCargoControlService {
	mock := &FakeCargoControlService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
