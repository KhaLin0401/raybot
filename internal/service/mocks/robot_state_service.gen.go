// Code generated by mockery v2.53.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	model "github.com/tbe-team/raybot/internal/model"
)

// FakeRobotStateService is an autogenerated mock type for the RobotStateService type
type FakeRobotStateService struct {
	mock.Mock
}

type FakeRobotStateService_Expecter struct {
	mock *mock.Mock
}

func (_m *FakeRobotStateService) EXPECT() *FakeRobotStateService_Expecter {
	return &FakeRobotStateService_Expecter{mock: &_m.Mock}
}

// GetRobotState provides a mock function with given fields: ctx
func (_m *FakeRobotStateService) GetRobotState(ctx context.Context) (model.RobotState, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetRobotState")
	}

	var r0 model.RobotState
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (model.RobotState, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) model.RobotState); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(model.RobotState)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FakeRobotStateService_GetRobotState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRobotState'
type FakeRobotStateService_GetRobotState_Call struct {
	*mock.Call
}

// GetRobotState is a helper method to define mock.On call
//   - ctx context.Context
func (_e *FakeRobotStateService_Expecter) GetRobotState(ctx interface{}) *FakeRobotStateService_GetRobotState_Call {
	return &FakeRobotStateService_GetRobotState_Call{Call: _e.mock.On("GetRobotState", ctx)}
}

func (_c *FakeRobotStateService_GetRobotState_Call) Run(run func(ctx context.Context)) *FakeRobotStateService_GetRobotState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *FakeRobotStateService_GetRobotState_Call) Return(_a0 model.RobotState, _a1 error) *FakeRobotStateService_GetRobotState_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FakeRobotStateService_GetRobotState_Call) RunAndReturn(run func(context.Context) (model.RobotState, error)) *FakeRobotStateService_GetRobotState_Call {
	_c.Call.Return(run)
	return _c
}

// NewFakeRobotStateService creates a new instance of FakeRobotStateService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFakeRobotStateService(t interface {
	mock.TestingT
	Cleanup(func())
}) *FakeRobotStateService {
	mock := &FakeRobotStateService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
