// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: command/v1/command.proto

package commandv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CommandService_MoveToLocation_FullMethodName = "/command.v1.CommandService/MoveToLocation"
	CommandService_LiftCargo_FullMethodName      = "/command.v1.CommandService/LiftCargo"
	CommandService_DropCargo_FullMethodName      = "/command.v1.CommandService/DropCargo"
	CommandService_OpenCargo_FullMethodName      = "/command.v1.CommandService/OpenCargo"
	CommandService_CloseCargo_FullMethodName     = "/command.v1.CommandService/CloseCargo"
)

// CommandServiceClient is the client API for CommandService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommandServiceClient interface {
	MoveToLocation(ctx context.Context, in *MoveToLocationRequest, opts ...grpc.CallOption) (*MoveToLocationResponse, error)
	LiftCargo(ctx context.Context, in *LiftCargoRequest, opts ...grpc.CallOption) (*LiftCargoResponse, error)
	DropCargo(ctx context.Context, in *DropCargoRequest, opts ...grpc.CallOption) (*DropCargoResponse, error)
	OpenCargo(ctx context.Context, in *OpenCargoRequest, opts ...grpc.CallOption) (*OpenCargoResponse, error)
	CloseCargo(ctx context.Context, in *CloseCargoRequest, opts ...grpc.CallOption) (*CloseCargoResponse, error)
}

type commandServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCommandServiceClient(cc grpc.ClientConnInterface) CommandServiceClient {
	return &commandServiceClient{cc}
}

func (c *commandServiceClient) MoveToLocation(ctx context.Context, in *MoveToLocationRequest, opts ...grpc.CallOption) (*MoveToLocationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MoveToLocationResponse)
	err := c.cc.Invoke(ctx, CommandService_MoveToLocation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commandServiceClient) LiftCargo(ctx context.Context, in *LiftCargoRequest, opts ...grpc.CallOption) (*LiftCargoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LiftCargoResponse)
	err := c.cc.Invoke(ctx, CommandService_LiftCargo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commandServiceClient) DropCargo(ctx context.Context, in *DropCargoRequest, opts ...grpc.CallOption) (*DropCargoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DropCargoResponse)
	err := c.cc.Invoke(ctx, CommandService_DropCargo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commandServiceClient) OpenCargo(ctx context.Context, in *OpenCargoRequest, opts ...grpc.CallOption) (*OpenCargoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OpenCargoResponse)
	err := c.cc.Invoke(ctx, CommandService_OpenCargo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commandServiceClient) CloseCargo(ctx context.Context, in *CloseCargoRequest, opts ...grpc.CallOption) (*CloseCargoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CloseCargoResponse)
	err := c.cc.Invoke(ctx, CommandService_CloseCargo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommandServiceServer is the server API for CommandService service.
// All implementations must embed UnimplementedCommandServiceServer
// for forward compatibility.
type CommandServiceServer interface {
	MoveToLocation(context.Context, *MoveToLocationRequest) (*MoveToLocationResponse, error)
	LiftCargo(context.Context, *LiftCargoRequest) (*LiftCargoResponse, error)
	DropCargo(context.Context, *DropCargoRequest) (*DropCargoResponse, error)
	OpenCargo(context.Context, *OpenCargoRequest) (*OpenCargoResponse, error)
	CloseCargo(context.Context, *CloseCargoRequest) (*CloseCargoResponse, error)
	mustEmbedUnimplementedCommandServiceServer()
}

// UnimplementedCommandServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCommandServiceServer struct{}

func (UnimplementedCommandServiceServer) MoveToLocation(context.Context, *MoveToLocationRequest) (*MoveToLocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MoveToLocation not implemented")
}
func (UnimplementedCommandServiceServer) LiftCargo(context.Context, *LiftCargoRequest) (*LiftCargoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LiftCargo not implemented")
}
func (UnimplementedCommandServiceServer) DropCargo(context.Context, *DropCargoRequest) (*DropCargoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DropCargo not implemented")
}
func (UnimplementedCommandServiceServer) OpenCargo(context.Context, *OpenCargoRequest) (*OpenCargoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenCargo not implemented")
}
func (UnimplementedCommandServiceServer) CloseCargo(context.Context, *CloseCargoRequest) (*CloseCargoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseCargo not implemented")
}
func (UnimplementedCommandServiceServer) mustEmbedUnimplementedCommandServiceServer() {}
func (UnimplementedCommandServiceServer) testEmbeddedByValue()                        {}

// UnsafeCommandServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommandServiceServer will
// result in compilation errors.
type UnsafeCommandServiceServer interface {
	mustEmbedUnimplementedCommandServiceServer()
}

func RegisterCommandServiceServer(s grpc.ServiceRegistrar, srv CommandServiceServer) {
	// If the following call pancis, it indicates UnimplementedCommandServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CommandService_ServiceDesc, srv)
}

func _CommandService_MoveToLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveToLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommandServiceServer).MoveToLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommandService_MoveToLocation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommandServiceServer).MoveToLocation(ctx, req.(*MoveToLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommandService_LiftCargo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LiftCargoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommandServiceServer).LiftCargo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommandService_LiftCargo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommandServiceServer).LiftCargo(ctx, req.(*LiftCargoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommandService_DropCargo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DropCargoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommandServiceServer).DropCargo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommandService_DropCargo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommandServiceServer).DropCargo(ctx, req.(*DropCargoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommandService_OpenCargo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenCargoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommandServiceServer).OpenCargo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommandService_OpenCargo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommandServiceServer).OpenCargo(ctx, req.(*OpenCargoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommandService_CloseCargo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseCargoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommandServiceServer).CloseCargo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommandService_CloseCargo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommandServiceServer).CloseCargo(ctx, req.(*CloseCargoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CommandService_ServiceDesc is the grpc.ServiceDesc for CommandService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CommandService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "command.v1.CommandService",
	HandlerType: (*CommandServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MoveToLocation",
			Handler:    _CommandService_MoveToLocation_Handler,
		},
		{
			MethodName: "LiftCargo",
			Handler:    _CommandService_LiftCargo_Handler,
		},
		{
			MethodName: "DropCargo",
			Handler:    _CommandService_DropCargo_Handler,
		},
		{
			MethodName: "OpenCargo",
			Handler:    _CommandService_OpenCargo_Handler,
		},
		{
			MethodName: "CloseCargo",
			Handler:    _CommandService_CloseCargo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "command/v1/command.proto",
}
