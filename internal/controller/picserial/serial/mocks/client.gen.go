// Code generated by mockery v2.53.1. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// FakeClient is an autogenerated mock type for the Client type
type FakeClient struct {
	mock.Mock
}

type FakeClient_Expecter struct {
	mock *mock.Mock
}

func (_m *FakeClient) EXPECT() *FakeClient_Expecter {
	return &FakeClient_Expecter{mock: &_m.Mock}
}

// Read provides a mock function with no fields
func (_m *FakeClient) Read() <-chan []byte {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Read")
	}

	var r0 <-chan []byte
	if rf, ok := ret.Get(0).(func() <-chan []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan []byte)
		}
	}

	return r0
}

// FakeClient_Read_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Read'
type FakeClient_Read_Call struct {
	*mock.Call
}

// Read is a helper method to define mock.On call
func (_e *FakeClient_Expecter) Read() *FakeClient_Read_Call {
	return &FakeClient_Read_Call{Call: _e.mock.On("Read")}
}

func (_c *FakeClient_Read_Call) Run(run func()) *FakeClient_Read_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *FakeClient_Read_Call) Return(_a0 <-chan []byte) *FakeClient_Read_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FakeClient_Read_Call) RunAndReturn(run func() <-chan []byte) *FakeClient_Read_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function with no fields
func (_m *FakeClient) Stop() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Stop")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FakeClient_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type FakeClient_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
func (_e *FakeClient_Expecter) Stop() *FakeClient_Stop_Call {
	return &FakeClient_Stop_Call{Call: _e.mock.On("Stop")}
}

func (_c *FakeClient_Stop_Call) Run(run func()) *FakeClient_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *FakeClient_Stop_Call) Return(_a0 error) *FakeClient_Stop_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FakeClient_Stop_Call) RunAndReturn(run func() error) *FakeClient_Stop_Call {
	_c.Call.Return(run)
	return _c
}

// Write provides a mock function with given fields: data
func (_m *FakeClient) Write(data []byte) error {
	ret := _m.Called(data)

	if len(ret) == 0 {
		panic("no return value specified for Write")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte) error); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FakeClient_Write_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Write'
type FakeClient_Write_Call struct {
	*mock.Call
}

// Write is a helper method to define mock.On call
//   - data []byte
func (_e *FakeClient_Expecter) Write(data interface{}) *FakeClient_Write_Call {
	return &FakeClient_Write_Call{Call: _e.mock.On("Write", data)}
}

func (_c *FakeClient_Write_Call) Run(run func(data []byte)) *FakeClient_Write_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *FakeClient_Write_Call) Return(_a0 error) *FakeClient_Write_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FakeClient_Write_Call) RunAndReturn(run func([]byte) error) *FakeClient_Write_Call {
	_c.Call.Return(run)
	return _c
}

// NewFakeClient creates a new instance of FakeClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFakeClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *FakeClient {
	mock := &FakeClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
