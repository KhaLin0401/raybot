// Code generated by mockery v2.53.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	model "github.com/tbe-team/raybot/internal/model"
)

// FakeESPSerialCommandRepository is an autogenerated mock type for the ESPSerialCommandRepository type
type FakeESPSerialCommandRepository struct {
	mock.Mock
}

type FakeESPSerialCommandRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *FakeESPSerialCommandRepository) EXPECT() *FakeESPSerialCommandRepository_Expecter {
	return &FakeESPSerialCommandRepository_Expecter{mock: &_m.Mock}
}

// CreateESPSerialCommand provides a mock function with given fields: ctx, command
func (_m *FakeESPSerialCommandRepository) CreateESPSerialCommand(ctx context.Context, command model.ESPSerialCommand) error {
	ret := _m.Called(ctx, command)

	if len(ret) == 0 {
		panic("no return value specified for CreateESPSerialCommand")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.ESPSerialCommand) error); ok {
		r0 = rf(ctx, command)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FakeESPSerialCommandRepository_CreateESPSerialCommand_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateESPSerialCommand'
type FakeESPSerialCommandRepository_CreateESPSerialCommand_Call struct {
	*mock.Call
}

// CreateESPSerialCommand is a helper method to define mock.On call
//   - ctx context.Context
//   - command model.ESPSerialCommand
func (_e *FakeESPSerialCommandRepository_Expecter) CreateESPSerialCommand(ctx interface{}, command interface{}) *FakeESPSerialCommandRepository_CreateESPSerialCommand_Call {
	return &FakeESPSerialCommandRepository_CreateESPSerialCommand_Call{Call: _e.mock.On("CreateESPSerialCommand", ctx, command)}
}

func (_c *FakeESPSerialCommandRepository_CreateESPSerialCommand_Call) Run(run func(ctx context.Context, command model.ESPSerialCommand)) *FakeESPSerialCommandRepository_CreateESPSerialCommand_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.ESPSerialCommand))
	})
	return _c
}

func (_c *FakeESPSerialCommandRepository_CreateESPSerialCommand_Call) Return(_a0 error) *FakeESPSerialCommandRepository_CreateESPSerialCommand_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FakeESPSerialCommandRepository_CreateESPSerialCommand_Call) RunAndReturn(run func(context.Context, model.ESPSerialCommand) error) *FakeESPSerialCommandRepository_CreateESPSerialCommand_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteESPSerialCommand provides a mock function with given fields: ctx, id
func (_m *FakeESPSerialCommandRepository) DeleteESPSerialCommand(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteESPSerialCommand")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FakeESPSerialCommandRepository_DeleteESPSerialCommand_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteESPSerialCommand'
type FakeESPSerialCommandRepository_DeleteESPSerialCommand_Call struct {
	*mock.Call
}

// DeleteESPSerialCommand is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *FakeESPSerialCommandRepository_Expecter) DeleteESPSerialCommand(ctx interface{}, id interface{}) *FakeESPSerialCommandRepository_DeleteESPSerialCommand_Call {
	return &FakeESPSerialCommandRepository_DeleteESPSerialCommand_Call{Call: _e.mock.On("DeleteESPSerialCommand", ctx, id)}
}

func (_c *FakeESPSerialCommandRepository_DeleteESPSerialCommand_Call) Run(run func(ctx context.Context, id string)) *FakeESPSerialCommandRepository_DeleteESPSerialCommand_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *FakeESPSerialCommandRepository_DeleteESPSerialCommand_Call) Return(_a0 error) *FakeESPSerialCommandRepository_DeleteESPSerialCommand_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FakeESPSerialCommandRepository_DeleteESPSerialCommand_Call) RunAndReturn(run func(context.Context, string) error) *FakeESPSerialCommandRepository_DeleteESPSerialCommand_Call {
	_c.Call.Return(run)
	return _c
}

// GetESPSerialCommand provides a mock function with given fields: ctx, id
func (_m *FakeESPSerialCommandRepository) GetESPSerialCommand(ctx context.Context, id string) (model.ESPSerialCommand, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetESPSerialCommand")
	}

	var r0 model.ESPSerialCommand
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (model.ESPSerialCommand, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) model.ESPSerialCommand); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(model.ESPSerialCommand)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FakeESPSerialCommandRepository_GetESPSerialCommand_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetESPSerialCommand'
type FakeESPSerialCommandRepository_GetESPSerialCommand_Call struct {
	*mock.Call
}

// GetESPSerialCommand is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *FakeESPSerialCommandRepository_Expecter) GetESPSerialCommand(ctx interface{}, id interface{}) *FakeESPSerialCommandRepository_GetESPSerialCommand_Call {
	return &FakeESPSerialCommandRepository_GetESPSerialCommand_Call{Call: _e.mock.On("GetESPSerialCommand", ctx, id)}
}

func (_c *FakeESPSerialCommandRepository_GetESPSerialCommand_Call) Run(run func(ctx context.Context, id string)) *FakeESPSerialCommandRepository_GetESPSerialCommand_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *FakeESPSerialCommandRepository_GetESPSerialCommand_Call) Return(_a0 model.ESPSerialCommand, _a1 error) *FakeESPSerialCommandRepository_GetESPSerialCommand_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FakeESPSerialCommandRepository_GetESPSerialCommand_Call) RunAndReturn(run func(context.Context, string) (model.ESPSerialCommand, error)) *FakeESPSerialCommandRepository_GetESPSerialCommand_Call {
	_c.Call.Return(run)
	return _c
}

// NewFakeESPSerialCommandRepository creates a new instance of FakeESPSerialCommandRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFakeESPSerialCommandRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *FakeESPSerialCommandRepository {
	mock := &FakeESPSerialCommandRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
