// Code generated by mockery v2.53.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	model "github.com/tbe-team/raybot/internal/model"
)

// FakeRobotStateRepository is an autogenerated mock type for the RobotStateRepository type
type FakeRobotStateRepository struct {
	mock.Mock
}

type FakeRobotStateRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *FakeRobotStateRepository) EXPECT() *FakeRobotStateRepository_Expecter {
	return &FakeRobotStateRepository_Expecter{mock: &_m.Mock}
}

// GetRobotState provides a mock function with given fields: ctx
func (_m *FakeRobotStateRepository) GetRobotState(ctx context.Context) (model.RobotState, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetRobotState")
	}

	var r0 model.RobotState
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (model.RobotState, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) model.RobotState); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(model.RobotState)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FakeRobotStateRepository_GetRobotState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRobotState'
type FakeRobotStateRepository_GetRobotState_Call struct {
	*mock.Call
}

// GetRobotState is a helper method to define mock.On call
//   - ctx context.Context
func (_e *FakeRobotStateRepository_Expecter) GetRobotState(ctx interface{}) *FakeRobotStateRepository_GetRobotState_Call {
	return &FakeRobotStateRepository_GetRobotState_Call{Call: _e.mock.On("GetRobotState", ctx)}
}

func (_c *FakeRobotStateRepository_GetRobotState_Call) Run(run func(ctx context.Context)) *FakeRobotStateRepository_GetRobotState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *FakeRobotStateRepository_GetRobotState_Call) Return(_a0 model.RobotState, _a1 error) *FakeRobotStateRepository_GetRobotState_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FakeRobotStateRepository_GetRobotState_Call) RunAndReturn(run func(context.Context) (model.RobotState, error)) *FakeRobotStateRepository_GetRobotState_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateRobotState provides a mock function with given fields: ctx, state
func (_m *FakeRobotStateRepository) UpdateRobotState(ctx context.Context, state model.RobotState) error {
	ret := _m.Called(ctx, state)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRobotState")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.RobotState) error); ok {
		r0 = rf(ctx, state)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FakeRobotStateRepository_UpdateRobotState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateRobotState'
type FakeRobotStateRepository_UpdateRobotState_Call struct {
	*mock.Call
}

// UpdateRobotState is a helper method to define mock.On call
//   - ctx context.Context
//   - state model.RobotState
func (_e *FakeRobotStateRepository_Expecter) UpdateRobotState(ctx interface{}, state interface{}) *FakeRobotStateRepository_UpdateRobotState_Call {
	return &FakeRobotStateRepository_UpdateRobotState_Call{Call: _e.mock.On("UpdateRobotState", ctx, state)}
}

func (_c *FakeRobotStateRepository_UpdateRobotState_Call) Run(run func(ctx context.Context, state model.RobotState)) *FakeRobotStateRepository_UpdateRobotState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.RobotState))
	})
	return _c
}

func (_c *FakeRobotStateRepository_UpdateRobotState_Call) Return(_a0 error) *FakeRobotStateRepository_UpdateRobotState_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FakeRobotStateRepository_UpdateRobotState_Call) RunAndReturn(run func(context.Context, model.RobotState) error) *FakeRobotStateRepository_UpdateRobotState_Call {
	_c.Call.Return(run)
	return _c
}

// NewFakeRobotStateRepository creates a new instance of FakeRobotStateRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFakeRobotStateRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *FakeRobotStateRepository {
	mock := &FakeRobotStateRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
