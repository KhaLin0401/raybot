// Code generated by mockery v2.53.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	db "github.com/tbe-team/raybot/internal/storage/db"

	model "github.com/tbe-team/raybot/internal/model"

	repository "github.com/tbe-team/raybot/internal/repository"
)

// FakeCargoRepository is an autogenerated mock type for the CargoRepository type
type FakeCargoRepository struct {
	mock.Mock
}

type FakeCargoRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *FakeCargoRepository) EXPECT() *FakeCargoRepository_Expecter {
	return &FakeCargoRepository_Expecter{mock: &_m.Mock}
}

// UpdateCargo provides a mock function with given fields: ctx, _a1, params
func (_m *FakeCargoRepository) UpdateCargo(ctx context.Context, _a1 db.SQLDB, params repository.UpdateCargoParams) (model.Cargo, error) {
	ret := _m.Called(ctx, _a1, params)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCargo")
	}

	var r0 model.Cargo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.SQLDB, repository.UpdateCargoParams) (model.Cargo, error)); ok {
		return rf(ctx, _a1, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.SQLDB, repository.UpdateCargoParams) model.Cargo); ok {
		r0 = rf(ctx, _a1, params)
	} else {
		r0 = ret.Get(0).(model.Cargo)
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.SQLDB, repository.UpdateCargoParams) error); ok {
		r1 = rf(ctx, _a1, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FakeCargoRepository_UpdateCargo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateCargo'
type FakeCargoRepository_UpdateCargo_Call struct {
	*mock.Call
}

// UpdateCargo is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 db.SQLDB
//   - params repository.UpdateCargoParams
func (_e *FakeCargoRepository_Expecter) UpdateCargo(ctx interface{}, _a1 interface{}, params interface{}) *FakeCargoRepository_UpdateCargo_Call {
	return &FakeCargoRepository_UpdateCargo_Call{Call: _e.mock.On("UpdateCargo", ctx, _a1, params)}
}

func (_c *FakeCargoRepository_UpdateCargo_Call) Run(run func(ctx context.Context, _a1 db.SQLDB, params repository.UpdateCargoParams)) *FakeCargoRepository_UpdateCargo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.SQLDB), args[2].(repository.UpdateCargoParams))
	})
	return _c
}

func (_c *FakeCargoRepository_UpdateCargo_Call) Return(_a0 model.Cargo, _a1 error) *FakeCargoRepository_UpdateCargo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FakeCargoRepository_UpdateCargo_Call) RunAndReturn(run func(context.Context, db.SQLDB, repository.UpdateCargoParams) (model.Cargo, error)) *FakeCargoRepository_UpdateCargo_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateCargoDoorMotor provides a mock function with given fields: ctx, _a1, params
func (_m *FakeCargoRepository) UpdateCargoDoorMotor(ctx context.Context, _a1 db.SQLDB, params repository.UpdateCargoDoorMotorParams) (model.CargoDoorMotor, error) {
	ret := _m.Called(ctx, _a1, params)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCargoDoorMotor")
	}

	var r0 model.CargoDoorMotor
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.SQLDB, repository.UpdateCargoDoorMotorParams) (model.CargoDoorMotor, error)); ok {
		return rf(ctx, _a1, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.SQLDB, repository.UpdateCargoDoorMotorParams) model.CargoDoorMotor); ok {
		r0 = rf(ctx, _a1, params)
	} else {
		r0 = ret.Get(0).(model.CargoDoorMotor)
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.SQLDB, repository.UpdateCargoDoorMotorParams) error); ok {
		r1 = rf(ctx, _a1, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FakeCargoRepository_UpdateCargoDoorMotor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateCargoDoorMotor'
type FakeCargoRepository_UpdateCargoDoorMotor_Call struct {
	*mock.Call
}

// UpdateCargoDoorMotor is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 db.SQLDB
//   - params repository.UpdateCargoDoorMotorParams
func (_e *FakeCargoRepository_Expecter) UpdateCargoDoorMotor(ctx interface{}, _a1 interface{}, params interface{}) *FakeCargoRepository_UpdateCargoDoorMotor_Call {
	return &FakeCargoRepository_UpdateCargoDoorMotor_Call{Call: _e.mock.On("UpdateCargoDoorMotor", ctx, _a1, params)}
}

func (_c *FakeCargoRepository_UpdateCargoDoorMotor_Call) Run(run func(ctx context.Context, _a1 db.SQLDB, params repository.UpdateCargoDoorMotorParams)) *FakeCargoRepository_UpdateCargoDoorMotor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.SQLDB), args[2].(repository.UpdateCargoDoorMotorParams))
	})
	return _c
}

func (_c *FakeCargoRepository_UpdateCargoDoorMotor_Call) Return(_a0 model.CargoDoorMotor, _a1 error) *FakeCargoRepository_UpdateCargoDoorMotor_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FakeCargoRepository_UpdateCargoDoorMotor_Call) RunAndReturn(run func(context.Context, db.SQLDB, repository.UpdateCargoDoorMotorParams) (model.CargoDoorMotor, error)) *FakeCargoRepository_UpdateCargoDoorMotor_Call {
	_c.Call.Return(run)
	return _c
}

// NewFakeCargoRepository creates a new instance of FakeCargoRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFakeCargoRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *FakeCargoRepository {
	mock := &FakeCargoRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
