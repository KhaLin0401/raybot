// Code generated by mockery v2.53.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	db "github.com/tbe-team/raybot/internal/storage/db"

	model "github.com/tbe-team/raybot/internal/model"
)

// FakeBatteryRepository is an autogenerated mock type for the BatteryRepository type
type FakeBatteryRepository struct {
	mock.Mock
}

type FakeBatteryRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *FakeBatteryRepository) EXPECT() *FakeBatteryRepository_Expecter {
	return &FakeBatteryRepository_Expecter{mock: &_m.Mock}
}

// GetBattery provides a mock function with given fields: ctx, _a1
func (_m *FakeBatteryRepository) GetBattery(ctx context.Context, _a1 db.SQLDB) (model.Battery, error) {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetBattery")
	}

	var r0 model.Battery
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.SQLDB) (model.Battery, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.SQLDB) model.Battery); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Get(0).(model.Battery)
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.SQLDB) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FakeBatteryRepository_GetBattery_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBattery'
type FakeBatteryRepository_GetBattery_Call struct {
	*mock.Call
}

// GetBattery is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 db.SQLDB
func (_e *FakeBatteryRepository_Expecter) GetBattery(ctx interface{}, _a1 interface{}) *FakeBatteryRepository_GetBattery_Call {
	return &FakeBatteryRepository_GetBattery_Call{Call: _e.mock.On("GetBattery", ctx, _a1)}
}

func (_c *FakeBatteryRepository_GetBattery_Call) Run(run func(ctx context.Context, _a1 db.SQLDB)) *FakeBatteryRepository_GetBattery_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.SQLDB))
	})
	return _c
}

func (_c *FakeBatteryRepository_GetBattery_Call) Return(_a0 model.Battery, _a1 error) *FakeBatteryRepository_GetBattery_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FakeBatteryRepository_GetBattery_Call) RunAndReturn(run func(context.Context, db.SQLDB) (model.Battery, error)) *FakeBatteryRepository_GetBattery_Call {
	_c.Call.Return(run)
	return _c
}

// GetBatteryCharge provides a mock function with given fields: ctx, _a1
func (_m *FakeBatteryRepository) GetBatteryCharge(ctx context.Context, _a1 db.SQLDB) (model.BatteryCharge, error) {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetBatteryCharge")
	}

	var r0 model.BatteryCharge
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.SQLDB) (model.BatteryCharge, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.SQLDB) model.BatteryCharge); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Get(0).(model.BatteryCharge)
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.SQLDB) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FakeBatteryRepository_GetBatteryCharge_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBatteryCharge'
type FakeBatteryRepository_GetBatteryCharge_Call struct {
	*mock.Call
}

// GetBatteryCharge is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 db.SQLDB
func (_e *FakeBatteryRepository_Expecter) GetBatteryCharge(ctx interface{}, _a1 interface{}) *FakeBatteryRepository_GetBatteryCharge_Call {
	return &FakeBatteryRepository_GetBatteryCharge_Call{Call: _e.mock.On("GetBatteryCharge", ctx, _a1)}
}

func (_c *FakeBatteryRepository_GetBatteryCharge_Call) Run(run func(ctx context.Context, _a1 db.SQLDB)) *FakeBatteryRepository_GetBatteryCharge_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.SQLDB))
	})
	return _c
}

func (_c *FakeBatteryRepository_GetBatteryCharge_Call) Return(_a0 model.BatteryCharge, _a1 error) *FakeBatteryRepository_GetBatteryCharge_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FakeBatteryRepository_GetBatteryCharge_Call) RunAndReturn(run func(context.Context, db.SQLDB) (model.BatteryCharge, error)) *FakeBatteryRepository_GetBatteryCharge_Call {
	_c.Call.Return(run)
	return _c
}

// GetBatteryDischarge provides a mock function with given fields: ctx, _a1
func (_m *FakeBatteryRepository) GetBatteryDischarge(ctx context.Context, _a1 db.SQLDB) (model.BatteryDischarge, error) {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetBatteryDischarge")
	}

	var r0 model.BatteryDischarge
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.SQLDB) (model.BatteryDischarge, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.SQLDB) model.BatteryDischarge); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Get(0).(model.BatteryDischarge)
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.SQLDB) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FakeBatteryRepository_GetBatteryDischarge_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBatteryDischarge'
type FakeBatteryRepository_GetBatteryDischarge_Call struct {
	*mock.Call
}

// GetBatteryDischarge is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 db.SQLDB
func (_e *FakeBatteryRepository_Expecter) GetBatteryDischarge(ctx interface{}, _a1 interface{}) *FakeBatteryRepository_GetBatteryDischarge_Call {
	return &FakeBatteryRepository_GetBatteryDischarge_Call{Call: _e.mock.On("GetBatteryDischarge", ctx, _a1)}
}

func (_c *FakeBatteryRepository_GetBatteryDischarge_Call) Run(run func(ctx context.Context, _a1 db.SQLDB)) *FakeBatteryRepository_GetBatteryDischarge_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.SQLDB))
	})
	return _c
}

func (_c *FakeBatteryRepository_GetBatteryDischarge_Call) Return(_a0 model.BatteryDischarge, _a1 error) *FakeBatteryRepository_GetBatteryDischarge_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FakeBatteryRepository_GetBatteryDischarge_Call) RunAndReturn(run func(context.Context, db.SQLDB) (model.BatteryDischarge, error)) *FakeBatteryRepository_GetBatteryDischarge_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateBattery provides a mock function with given fields: ctx, _a1, battery
func (_m *FakeBatteryRepository) UpdateBattery(ctx context.Context, _a1 db.SQLDB, battery model.Battery) error {
	ret := _m.Called(ctx, _a1, battery)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBattery")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, db.SQLDB, model.Battery) error); ok {
		r0 = rf(ctx, _a1, battery)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FakeBatteryRepository_UpdateBattery_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateBattery'
type FakeBatteryRepository_UpdateBattery_Call struct {
	*mock.Call
}

// UpdateBattery is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 db.SQLDB
//   - battery model.Battery
func (_e *FakeBatteryRepository_Expecter) UpdateBattery(ctx interface{}, _a1 interface{}, battery interface{}) *FakeBatteryRepository_UpdateBattery_Call {
	return &FakeBatteryRepository_UpdateBattery_Call{Call: _e.mock.On("UpdateBattery", ctx, _a1, battery)}
}

func (_c *FakeBatteryRepository_UpdateBattery_Call) Run(run func(ctx context.Context, _a1 db.SQLDB, battery model.Battery)) *FakeBatteryRepository_UpdateBattery_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.SQLDB), args[2].(model.Battery))
	})
	return _c
}

func (_c *FakeBatteryRepository_UpdateBattery_Call) Return(_a0 error) *FakeBatteryRepository_UpdateBattery_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FakeBatteryRepository_UpdateBattery_Call) RunAndReturn(run func(context.Context, db.SQLDB, model.Battery) error) *FakeBatteryRepository_UpdateBattery_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateBatteryCharge provides a mock function with given fields: ctx, _a1, batteryCharge
func (_m *FakeBatteryRepository) UpdateBatteryCharge(ctx context.Context, _a1 db.SQLDB, batteryCharge model.BatteryCharge) error {
	ret := _m.Called(ctx, _a1, batteryCharge)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBatteryCharge")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, db.SQLDB, model.BatteryCharge) error); ok {
		r0 = rf(ctx, _a1, batteryCharge)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FakeBatteryRepository_UpdateBatteryCharge_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateBatteryCharge'
type FakeBatteryRepository_UpdateBatteryCharge_Call struct {
	*mock.Call
}

// UpdateBatteryCharge is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 db.SQLDB
//   - batteryCharge model.BatteryCharge
func (_e *FakeBatteryRepository_Expecter) UpdateBatteryCharge(ctx interface{}, _a1 interface{}, batteryCharge interface{}) *FakeBatteryRepository_UpdateBatteryCharge_Call {
	return &FakeBatteryRepository_UpdateBatteryCharge_Call{Call: _e.mock.On("UpdateBatteryCharge", ctx, _a1, batteryCharge)}
}

func (_c *FakeBatteryRepository_UpdateBatteryCharge_Call) Run(run func(ctx context.Context, _a1 db.SQLDB, batteryCharge model.BatteryCharge)) *FakeBatteryRepository_UpdateBatteryCharge_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.SQLDB), args[2].(model.BatteryCharge))
	})
	return _c
}

func (_c *FakeBatteryRepository_UpdateBatteryCharge_Call) Return(_a0 error) *FakeBatteryRepository_UpdateBatteryCharge_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FakeBatteryRepository_UpdateBatteryCharge_Call) RunAndReturn(run func(context.Context, db.SQLDB, model.BatteryCharge) error) *FakeBatteryRepository_UpdateBatteryCharge_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateBatteryDischarge provides a mock function with given fields: ctx, _a1, batteryDischarge
func (_m *FakeBatteryRepository) UpdateBatteryDischarge(ctx context.Context, _a1 db.SQLDB, batteryDischarge model.BatteryDischarge) error {
	ret := _m.Called(ctx, _a1, batteryDischarge)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBatteryDischarge")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, db.SQLDB, model.BatteryDischarge) error); ok {
		r0 = rf(ctx, _a1, batteryDischarge)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FakeBatteryRepository_UpdateBatteryDischarge_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateBatteryDischarge'
type FakeBatteryRepository_UpdateBatteryDischarge_Call struct {
	*mock.Call
}

// UpdateBatteryDischarge is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 db.SQLDB
//   - batteryDischarge model.BatteryDischarge
func (_e *FakeBatteryRepository_Expecter) UpdateBatteryDischarge(ctx interface{}, _a1 interface{}, batteryDischarge interface{}) *FakeBatteryRepository_UpdateBatteryDischarge_Call {
	return &FakeBatteryRepository_UpdateBatteryDischarge_Call{Call: _e.mock.On("UpdateBatteryDischarge", ctx, _a1, batteryDischarge)}
}

func (_c *FakeBatteryRepository_UpdateBatteryDischarge_Call) Run(run func(ctx context.Context, _a1 db.SQLDB, batteryDischarge model.BatteryDischarge)) *FakeBatteryRepository_UpdateBatteryDischarge_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.SQLDB), args[2].(model.BatteryDischarge))
	})
	return _c
}

func (_c *FakeBatteryRepository_UpdateBatteryDischarge_Call) Return(_a0 error) *FakeBatteryRepository_UpdateBatteryDischarge_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FakeBatteryRepository_UpdateBatteryDischarge_Call) RunAndReturn(run func(context.Context, db.SQLDB, model.BatteryDischarge) error) *FakeBatteryRepository_UpdateBatteryDischarge_Call {
	_c.Call.Return(run)
	return _c
}

// NewFakeBatteryRepository creates a new instance of FakeBatteryRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFakeBatteryRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *FakeBatteryRepository {
	mock := &FakeBatteryRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
