// Code generated by mockery v2.53.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	repository "github.com/tbe-team/raybot/internal/repository"
)

// FakeRepository is an autogenerated mock type for the Repository type
type FakeRepository struct {
	mock.Mock
}

type FakeRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *FakeRepository) EXPECT() *FakeRepository_Expecter {
	return &FakeRepository_Expecter{mock: &_m.Mock}
}

// RobotState provides a mock function with no fields
func (_m *FakeRepository) RobotState() repository.RobotStateRepository {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for RobotState")
	}

	var r0 repository.RobotStateRepository
	if rf, ok := ret.Get(0).(func() repository.RobotStateRepository); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(repository.RobotStateRepository)
		}
	}

	return r0
}

// FakeRepository_RobotState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RobotState'
type FakeRepository_RobotState_Call struct {
	*mock.Call
}

// RobotState is a helper method to define mock.On call
func (_e *FakeRepository_Expecter) RobotState() *FakeRepository_RobotState_Call {
	return &FakeRepository_RobotState_Call{Call: _e.mock.On("RobotState")}
}

func (_c *FakeRepository_RobotState_Call) Run(run func()) *FakeRepository_RobotState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *FakeRepository_RobotState_Call) Return(_a0 repository.RobotStateRepository) *FakeRepository_RobotState_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FakeRepository_RobotState_Call) RunAndReturn(run func() repository.RobotStateRepository) *FakeRepository_RobotState_Call {
	_c.Call.Return(run)
	return _c
}

// NewFakeRepository creates a new instance of FakeRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFakeRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *FakeRepository {
	mock := &FakeRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
