// Code generated by mockery v2.53.1. DO NOT EDIT.

package mocks

import (
	context "context"

	config "github.com/tbe-team/raybot/internal/config"

	mock "github.com/stretchr/testify/mock"
)

// FakeManager is an autogenerated mock type for the Manager type
type FakeManager struct {
	mock.Mock
}

type FakeManager_Expecter struct {
	mock *mock.Mock
}

func (_m *FakeManager) EXPECT() *FakeManager_Expecter {
	return &FakeManager_Expecter{mock: &_m.Mock}
}

// GetConfig provides a mock function with no fields
func (_m *FakeManager) GetConfig() config.Config {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetConfig")
	}

	var r0 config.Config
	if rf, ok := ret.Get(0).(func() config.Config); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(config.Config)
	}

	return r0
}

// FakeManager_GetConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetConfig'
type FakeManager_GetConfig_Call struct {
	*mock.Call
}

// GetConfig is a helper method to define mock.On call
func (_e *FakeManager_Expecter) GetConfig() *FakeManager_GetConfig_Call {
	return &FakeManager_GetConfig_Call{Call: _e.mock.On("GetConfig")}
}

func (_c *FakeManager_GetConfig_Call) Run(run func()) *FakeManager_GetConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *FakeManager_GetConfig_Call) Return(_a0 config.Config) *FakeManager_GetConfig_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FakeManager_GetConfig_Call) RunAndReturn(run func() config.Config) *FakeManager_GetConfig_Call {
	_c.Call.Return(run)
	return _c
}

// SaveConfig provides a mock function with given fields: ctx, cfg
func (_m *FakeManager) SaveConfig(ctx context.Context, cfg config.Config) error {
	ret := _m.Called(ctx, cfg)

	if len(ret) == 0 {
		panic("no return value specified for SaveConfig")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, config.Config) error); ok {
		r0 = rf(ctx, cfg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FakeManager_SaveConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveConfig'
type FakeManager_SaveConfig_Call struct {
	*mock.Call
}

// SaveConfig is a helper method to define mock.On call
//   - ctx context.Context
//   - cfg config.Config
func (_e *FakeManager_Expecter) SaveConfig(ctx interface{}, cfg interface{}) *FakeManager_SaveConfig_Call {
	return &FakeManager_SaveConfig_Call{Call: _e.mock.On("SaveConfig", ctx, cfg)}
}

func (_c *FakeManager_SaveConfig_Call) Run(run func(ctx context.Context, cfg config.Config)) *FakeManager_SaveConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(config.Config))
	})
	return _c
}

func (_c *FakeManager_SaveConfig_Call) Return(_a0 error) *FakeManager_SaveConfig_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FakeManager_SaveConfig_Call) RunAndReturn(run func(context.Context, config.Config) error) *FakeManager_SaveConfig_Call {
	_c.Call.Return(run)
	return _c
}

// NewFakeManager creates a new instance of FakeManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFakeManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *FakeManager {
	mock := &FakeManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
