// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: battery.sql

package sqlc

import (
	"context"
)

const batteryChargeSettingGet = `-- name: BatteryChargeSettingGet :one
SELECT id, current_limit, enabled, updated_at FROM battery_charge_setting
WHERE id = 1
`

func (q *Queries) BatteryChargeSettingGet(ctx context.Context, db DBTX) (BatteryChargeSetting, error) {
	row := db.QueryRowContext(ctx, batteryChargeSettingGet)
	var i BatteryChargeSetting
	err := row.Scan(
		&i.ID,
		&i.CurrentLimit,
		&i.Enabled,
		&i.UpdatedAt,
	)
	return i, err
}

const batteryChargeSettingUpdate = `-- name: BatteryChargeSettingUpdate :exec
UPDATE battery_charge_setting
SET
	current_limit = ?1,
	enabled = ?2,
	updated_at = ?3
WHERE id = 1
`

type BatteryChargeSettingUpdateParams struct {
	CurrentLimit int64  `json:"current_limit"`
	Enabled      int64  `json:"enabled"`
	UpdatedAt    string `json:"updated_at"`
}

func (q *Queries) BatteryChargeSettingUpdate(ctx context.Context, db DBTX, arg BatteryChargeSettingUpdateParams) error {
	_, err := db.ExecContext(ctx, batteryChargeSettingUpdate, arg.CurrentLimit, arg.Enabled, arg.UpdatedAt)
	return err
}

const batteryDischargeSettingGet = `-- name: BatteryDischargeSettingGet :one
SELECT id, current_limit, enabled, updated_at FROM battery_discharge_setting
WHERE id = 1
`

func (q *Queries) BatteryDischargeSettingGet(ctx context.Context, db DBTX) (BatteryDischargeSetting, error) {
	row := db.QueryRowContext(ctx, batteryDischargeSettingGet)
	var i BatteryDischargeSetting
	err := row.Scan(
		&i.ID,
		&i.CurrentLimit,
		&i.Enabled,
		&i.UpdatedAt,
	)
	return i, err
}

const batteryDischargeSettingUpdate = `-- name: BatteryDischargeSettingUpdate :exec
UPDATE battery_discharge_setting
SET
	current_limit = ?1,
	enabled = ?2,
	updated_at = ?3
WHERE id = 1
`

type BatteryDischargeSettingUpdateParams struct {
	CurrentLimit int64  `json:"current_limit"`
	Enabled      int64  `json:"enabled"`
	UpdatedAt    string `json:"updated_at"`
}

func (q *Queries) BatteryDischargeSettingUpdate(ctx context.Context, db DBTX, arg BatteryDischargeSettingUpdateParams) error {
	_, err := db.ExecContext(ctx, batteryDischargeSettingUpdate, arg.CurrentLimit, arg.Enabled, arg.UpdatedAt)
	return err
}
