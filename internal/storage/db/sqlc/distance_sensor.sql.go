// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: distance_sensor.sql

package sqlc

import (
	"context"
)

const distanceSensorGet = `-- name: DistanceSensorGet :one
SELECT id, front_distance, back_distance, down_distance, updated_at FROM distance_sensor
`

func (q *Queries) DistanceSensorGet(ctx context.Context, db DBTX) (DistanceSensor, error) {
	row := db.QueryRowContext(ctx, distanceSensorGet)
	var i DistanceSensor
	err := row.Scan(
		&i.ID,
		&i.FrontDistance,
		&i.BackDistance,
		&i.DownDistance,
		&i.UpdatedAt,
	)
	return i, err
}

const distanceSensorUpdate = `-- name: DistanceSensorUpdate :exec
UPDATE distance_sensor
SET
	front_distance = ?,
	back_distance = ?,
	down_distance = ?,
	updated_at = ?
WHERE id = 1
`

type DistanceSensorUpdateParams struct {
	FrontDistance int64  `json:"front_distance"`
	BackDistance  int64  `json:"back_distance"`
	DownDistance  int64  `json:"down_distance"`
	UpdatedAt     string `json:"updated_at"`
}

func (q *Queries) DistanceSensorUpdate(ctx context.Context, db DBTX, arg DistanceSensorUpdateParams) error {
	_, err := db.ExecContext(ctx, distanceSensorUpdate,
		arg.FrontDistance,
		arg.BackDistance,
		arg.DownDistance,
		arg.UpdatedAt,
	)
	return err
}
