// Code generated by mockery v2.53.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	db "github.com/tbe-team/raybot/internal/storage/db"
)

// FakeProvider is an autogenerated mock type for the Provider type
type FakeProvider struct {
	mock.Mock
}

type FakeProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *FakeProvider) EXPECT() *FakeProvider_Expecter {
	return &FakeProvider_Expecter{mock: &_m.Mock}
}

// DB provides a mock function with no fields
func (_m *FakeProvider) DB() db.Provider {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for DB")
	}

	var r0 db.Provider
	if rf, ok := ret.Get(0).(func() db.Provider); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(db.Provider)
		}
	}

	return r0
}

// FakeProvider_DB_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DB'
type FakeProvider_DB_Call struct {
	*mock.Call
}

// DB is a helper method to define mock.On call
func (_e *FakeProvider_Expecter) DB() *FakeProvider_DB_Call {
	return &FakeProvider_DB_Call{Call: _e.mock.On("DB")}
}

func (_c *FakeProvider_DB_Call) Run(run func()) *FakeProvider_DB_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *FakeProvider_DB_Call) Return(_a0 db.Provider) *FakeProvider_DB_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FakeProvider_DB_Call) RunAndReturn(run func() db.Provider) *FakeProvider_DB_Call {
	_c.Call.Return(run)
	return _c
}

// WithTX provides a mock function with given fields: ctx, fn
func (_m *FakeProvider) WithTX(ctx context.Context, fn func(db.Provider) error) error {
	ret := _m.Called(ctx, fn)

	if len(ret) == 0 {
		panic("no return value specified for WithTX")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, func(db.Provider) error) error); ok {
		r0 = rf(ctx, fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FakeProvider_WithTX_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithTX'
type FakeProvider_WithTX_Call struct {
	*mock.Call
}

// WithTX is a helper method to define mock.On call
//   - ctx context.Context
//   - fn func(db.SQLDB) error
func (_e *FakeProvider_Expecter) WithTX(ctx interface{}, fn interface{}) *FakeProvider_WithTX_Call {
	return &FakeProvider_WithTX_Call{Call: _e.mock.On("WithTX", ctx, fn)}
}

func (_c *FakeProvider_WithTX_Call) Run(run func(ctx context.Context, fn func(db.Provider) error)) *FakeProvider_WithTX_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(func(db.Provider) error))
	})
	return _c
}

func (_c *FakeProvider_WithTX_Call) Return(_a0 error) *FakeProvider_WithTX_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FakeProvider_WithTX_Call) RunAndReturn(run func(context.Context, func(db.Provider) error) error) *FakeProvider_WithTX_Call {
	_c.Call.Return(run)
	return _c
}

// NewFakeProvider creates a new instance of FakeProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFakeProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *FakeProvider {
	mock := &FakeProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
