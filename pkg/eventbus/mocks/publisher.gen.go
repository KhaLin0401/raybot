// Code generated by mockery v2.53.1. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	eventbus "github.com/tbe-team/raybot/pkg/eventbus"
)

// FakePublisher is an autogenerated mock type for the Publisher type
type FakePublisher struct {
	mock.Mock
}

type FakePublisher_Expecter struct {
	mock *mock.Mock
}

func (_m *FakePublisher) EXPECT() *FakePublisher_Expecter {
	return &FakePublisher_Expecter{mock: &_m.Mock}
}

// Publish provides a mock function with given fields: topic, message
func (_m *FakePublisher) Publish(topic string, message *eventbus.Message) {
	_m.Called(topic, message)
}

// FakePublisher_Publish_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Publish'
type FakePublisher_Publish_Call struct {
	*mock.Call
}

// Publish is a helper method to define mock.On call
//   - topic string
//   - message *eventbus.Message
func (_e *FakePublisher_Expecter) Publish(topic interface{}, message interface{}) *FakePublisher_Publish_Call {
	return &FakePublisher_Publish_Call{Call: _e.mock.On("Publish", topic, message)}
}

func (_c *FakePublisher_Publish_Call) Run(run func(topic string, message *eventbus.Message)) *FakePublisher_Publish_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(*eventbus.Message))
	})
	return _c
}

func (_c *FakePublisher_Publish_Call) Return() *FakePublisher_Publish_Call {
	_c.Call.Return()
	return _c
}

func (_c *FakePublisher_Publish_Call) RunAndReturn(run func(string, *eventbus.Message)) *FakePublisher_Publish_Call {
	_c.Run(run)
	return _c
}

// NewFakePublisher creates a new instance of FakePublisher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFakePublisher(t interface {
	mock.TestingT
	Cleanup(func())
}) *FakePublisher {
	mock := &FakePublisher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
