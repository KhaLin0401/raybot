openapi: 3.0.0
info:
  version: 0.1.0
  title: Raybot API
  description: The Raybot API
  license:
    url: https://opensource.org/licenses/MIT
    name: MIT
servers:
  - url: /api/v1
security: []
paths:
  /system/config:
    get:
      summary: Get system configuration
      operationId: getSystemConfig
      description: Get the system configuration
      tags:
        - system
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemConfigResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      summary: Update system configuration
      operationId: updateSystemConfig
      description: Update the system configuration
      tags:
        - system
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SystemConfigRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemConfigResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /system/restart:
    post:
      summary: Restart the application
      operationId: restartApplication
      description: Restart the application after 3 seconds.
      tags:
        - system
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /health:
    get:
      summary: Get health status
      operationId: getHealth
      description: Get the health status.
      tags:
        - health
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /robot-state:
    get:
      summary: Get robot state
      operationId: getRobotState
      description: Get the current state of the robot
      tags:
        - robot-state
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RobotStateResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /commands:
    get:
      summary: List all commands
      operationId: listCommands
      description: List all commands
      tags:
        - commands
      parameters:
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/PageSize'
        - name: sorts
          in: query
          description: |
            Sort the commands by the given field. Use `-` to sort in descending order. Use `,` to sort by multiple fields. Example: `-created_at,status` Allowed fields:
              - type
              - status
              - source
              - created_at
              - completed_at
          required: false
          schema:
            type: string
      responses:
        '200':
          description: A list of commands
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommandListResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /commands/in-progress:
    get:
      summary: Get current processing command
      operationId: getCurrentProcessingCommand
      description: Get the current processing command
      tags:
        - commands
      responses:
        '200':
          description: The current processing command
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommandResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
components:
  schemas:
    LogConfig:
      type: object
      properties:
        level:
          type: string
          enum:
            - debug
            - info
            - warn
            - error
          example: debug
          description: The log level for the gRPC server
          x-order: 1
          x-go-type: string
        format:
          type: string
          enum:
            - json
            - text
          example: json
          description: The log format for the gRPC server
          x-order: 2
          x-go-type: string
        addSource:
          type: boolean
          example: false
          description: Whether to add the source to the log
          x-order: 3
      required:
        - level
        - format
        - addSource
    GRPCServerConfig:
      type: object
      properties:
        enable:
          type: boolean
          example: true
          description: Whether to enable the gRPC server
          x-order: 1
      required:
        - enable
    CloudConfig:
      type: object
      properties:
        address:
          type: string
          example: localhost:50051
          description: The address for the cloud service
          x-order: 1
      required:
        - address
    GRPCConfig:
      type: object
      properties:
        server:
          $ref: '#/components/schemas/GRPCServerConfig'
        cloud:
          $ref: '#/components/schemas/CloudConfig'
      required:
        - server
        - cloud
    HTTPConfig:
      type: object
      properties:
        enableSwagger:
          type: boolean
          example: true
          description: Whether to enable the Swagger UI
          x-order: 1
      required:
        - enableSwagger
    SerialConfig:
      type: object
      properties:
        port:
          type: string
          example: /dev/ttyUSB0
          description: The port name for the serial connection
          x-order: 1
        baudRate:
          type: integer
          example: 9600
          description: The baud rate for the serial connection
          x-order: 2
        dataBits:
          type: integer
          example: 8
          description: The data bits for the serial connection
          x-order: 3
        stopBits:
          type: number
          format: double
          example: 1
          description: The stop bits for the serial connection
          x-order: 4
          x-go-type: float64
        parity:
          type: string
          enum:
            - none
            - even
            - odd
          example: none
          description: The parity for the serial connection
          x-order: 5
          x-go-type: string
        readTimeout:
          type: number
          format: double
          example: 1
          description: The read timeout for the serial connection
          x-order: 6
          x-go-type: float64
      required:
        - port
        - baudRate
        - dataBits
        - stopBits
        - parity
        - readTimeout
    PicConfig:
      type: object
      properties:
        serial:
          $ref: '#/components/schemas/SerialConfig'
      required:
        - serial
    ESPConfig:
      type: object
      properties:
        serial:
          $ref: '#/components/schemas/SerialConfig'
      required:
        - serial
    SystemConfigResponse:
      type: object
      properties:
        log:
          $ref: '#/components/schemas/LogConfig'
          x-order: 1
        grpc:
          $ref: '#/components/schemas/GRPCConfig'
          x-order: 2
        http:
          $ref: '#/components/schemas/HTTPConfig'
          x-order: 3
        pic:
          $ref: '#/components/schemas/PicConfig'
          x-order: 4
        esp:
          $ref: '#/components/schemas/ESPConfig'
          x-order: 5
      required:
        - log
        - grpc
        - http
        - pic
        - esp
    FieldError:
      type: object
      properties:
        field:
          type: string
          description: field name
          example: name
          x-order: 1
        message:
          type: string
          description: error message
          example: Name is required
          x-order: 2
      required:
        - field
        - message
    ErrorResponse:
      type: object
      properties:
        code:
          type: string
          description: custom raybot error code
          example: item.NotFound
          x-order: 1
        message:
          type: string
          description: custom raybot error message
          example: Item not found
          x-order: 2
        details:
          type: array
          items:
            $ref: '#/components/schemas/FieldError'
          x-order: 3
      required:
        - code
        - message
    SystemConfigRequest:
      type: object
      properties:
        log:
          $ref: '#/components/schemas/LogConfig'
        grpc:
          $ref: '#/components/schemas/GRPCConfig'
        http:
          $ref: '#/components/schemas/HTTPConfig'
        pic:
          $ref: '#/components/schemas/PicConfig'
        esp:
          $ref: '#/components/schemas/ESPConfig'
      required:
        - log
        - grpc
        - http
        - pic
        - esp
    HealthResponse:
      type: object
      properties:
        status:
          type: string
          example: ok
          description: The health status
          x-order: 1
      required:
        - status
    BatteryState:
      type: object
      properties:
        current:
          type: integer
          example: 100
          description: The current of the battery
          x-order: 1
          x-go-type: uint16
        temp:
          type: integer
          example: 25
          description: The temperature of the battery
          x-order: 2
          x-go-type: uint8
        voltage:
          type: integer
          example: 120
          description: The voltage of the battery
          x-order: 3
          x-go-type: uint16
        cellVoltages:
          type: array
          items:
            type: integer
          example:
            - 12
            - 12
            - 12
            - 12
          description: The cell voltages of the battery
          x-order: 4
          x-go-type: '[]uint16'
        percent:
          type: integer
          example: 50
          description: The percentage of the battery
          x-order: 5
          x-go-type: uint8
        fault:
          type: integer
          example: 0
          description: The fault of the battery
          x-order: 6
          x-go-type: uint8
        health:
          type: integer
          example: 100
          description: The health of the battery
          x-order: 7
          x-go-type: uint8
        updatedAt:
          type: string
          format: date-time
          example: '2021-01-01T00:00:00Z'
          description: The updated at time of the battery
          x-order: 8
      required:
        - current
        - temp
        - voltage
        - cellVoltages
        - percent
        - fault
        - health
        - updatedAt
    ChargeState:
      type: object
      properties:
        currentLimit:
          type: integer
          example: 100
          description: The current limit of the charge
          x-order: 1
          x-go-type: uint16
        enabled:
          type: boolean
          example: true
          description: Whether the charge is enabled
          x-order: 2
        updatedAt:
          type: string
          format: date-time
          example: '2021-01-01T00:00:00Z'
          description: The updated at time of the charge
          x-order: 3
      required:
        - currentLimit
        - enabled
        - updatedAt
    DischargeState:
      type: object
      properties:
        currentLimit:
          type: integer
          example: 100
          description: The current limit of the discharge
          x-order: 1
          x-go-type: uint16
        enabled:
          type: boolean
          example: true
          description: Whether the discharge is enabled
          x-order: 2
        updatedAt:
          type: string
          format: date-time
          example: '2021-01-01T00:00:00Z'
          description: The updated at time of the discharge
          x-order: 3
      required:
        - currentLimit
        - enabled
        - updatedAt
    DistanceSensorState:
      type: object
      properties:
        frontDistance:
          type: integer
          example: 100
          description: The front distance of the distance sensor
          x-order: 1
          x-go-type: uint16
        backDistance:
          type: integer
          example: 100
          description: The back distance of the distance sensor
          x-order: 2
          x-go-type: uint16
        downDistance:
          type: integer
          example: 100
          description: The down distance of the distance sensor
          x-order: 3
          x-go-type: uint16
        updatedAt:
          type: string
          format: date-time
          example: '2021-01-01T00:00:00Z'
          description: The updated at time of the distance sensor
          x-order: 4
      required:
        - frontDistance
        - backDistance
        - downDistance
        - updatedAt
    LiftMotorState:
      type: object
      properties:
        currentPosition:
          type: integer
          example: 100
          description: The current position of the lift motor
          x-order: 1
          x-go-type: uint16
        targetPosition:
          type: integer
          example: 100
          description: The target position of the lift motor
          x-order: 2
          x-go-type: uint16
        isRunning:
          type: boolean
          example: true
          description: Whether the lift motor is running
          x-order: 3
        enabled:
          type: boolean
          example: true
          description: Whether the lift motor is enabled
          x-order: 4
        updatedAt:
          type: string
          format: date-time
          example: '2021-01-01T00:00:00Z'
          description: The updated at time of the lift motor
          x-order: 5
      required:
        - currentPosition
        - targetPosition
        - isRunning
        - enabled
        - updatedAt
    DriveMotorState:
      type: object
      properties:
        direction:
          type: string
          enum:
            - FORWARD
            - BACKWARD
          example: FORWARD
          description: The direction of the drive motor
          x-order: 1
          x-go-type: string
        speed:
          type: integer
          example: 100
          description: The speed of the drive motor (0-100)
          x-order: 2
          x-go-type: uint8
        isRunning:
          type: boolean
          example: true
          description: Whether the drive motor is running
          x-order: 3
        enabled:
          type: boolean
          example: true
          description: Whether the drive motor is enabled
          x-order: 4
        updatedAt:
          type: string
          format: date-time
          example: '2021-01-01T00:00:00Z'
          description: The updated at time of the drive motor
          x-order: 5
      required:
        - direction
        - speed
        - isRunning
        - enabled
        - updatedAt
    LocationState:
      type: object
      properties:
        currentLocation:
          type: string
          example: ABCxyz
          description: The current location of the robot
          x-order: 1
        updatedAt:
          type: string
          format: date-time
          example: '2021-01-01T00:00:00Z'
          description: The updated at time of the location
          x-order: 2
      required:
        - currentLocation
        - updatedAt
    CargoState:
      type: object
      properties:
        isOpen:
          type: boolean
          example: true
          description: Whether the cargo is open
          x-order: 1
        qrCode:
          type: string
          example: ABCxyz
          description: The QR code read from the cargo QR scanner
          x-order: 2
        bottomDistance:
          type: integer
          example: 100
          description: The bottom distance of the cargo
          x-order: 3
          x-go-type: uint16
        updatedAt:
          type: string
          format: date-time
          example: '2025-01-01T00:00:00Z'
          description: The updated at time of the cargo
          x-order: 4
      required:
        - isOpen
        - qrCode
        - bottomDistance
        - updatedAt
    CargoDoorMotorState:
      type: object
      properties:
        direction:
          type: string
          enum:
            - CLOSE
            - OPEN
          example: CLOSE
          description: The direction of the cargo door motor
          x-order: 1
          x-go-type: string
        speed:
          type: integer
          example: 100
          description: The speed of the cargo door motor
          x-order: 2
          x-go-type: uint8
        isRunning:
          type: boolean
          example: true
          description: Whether the cargo door motor is running
          x-order: 3
        enabled:
          type: boolean
          example: true
          description: Whether the cargo door motor is enabled
          x-order: 4
        updatedAt:
          type: string
          format: date-time
          example: '2025-01-01T00:00:00Z'
          description: The updated at time of the cargo door motor
          x-order: 5
      required:
        - direction
        - speed
        - isRunning
        - enabled
        - updatedAt
    RobotStateResponse:
      type: object
      properties:
        battery:
          $ref: '#/components/schemas/BatteryState'
          x-order: 1
        charge:
          $ref: '#/components/schemas/ChargeState'
          x-order: 2
        discharge:
          $ref: '#/components/schemas/DischargeState'
          x-order: 3
        distanceSensor:
          $ref: '#/components/schemas/DistanceSensorState'
          x-order: 4
        liftMotor:
          $ref: '#/components/schemas/LiftMotorState'
          x-order: 5
        driveMotor:
          $ref: '#/components/schemas/DriveMotorState'
          x-order: 6
        location:
          $ref: '#/components/schemas/LocationState'
          x-order: 7
        cargo:
          $ref: '#/components/schemas/CargoState'
          x-order: 8
        cargoDoorMotor:
          $ref: '#/components/schemas/CargoDoorMotorState'
          x-order: 9
      required:
        - battery
        - charge
        - discharge
        - distanceSensor
        - liftMotor
        - driveMotor
        - location
        - cargo
        - cargoDoorMotor
    CommandType:
      type: string
      enum:
        - MOVE_TO_LOCATION
        - LIFT_CARGO
        - DROP_CARGO
        - OPEN_CARGO
        - CLOSE_CARGO
      description: The type of command
      x-go-type: string
    CommandStatus:
      type: string
      enum:
        - IN_PROGRESS
        - SUCCEEDED
        - FAILED
      description: The status of the command
      x-go-type: string
    CommandSource:
      type: string
      enum:
        - MANUAL
        - CLOUD
      description: The source of the command
      x-go-type: string
    CommandMoveToLocationInputs:
      type: object
      properties:
        location:
          type: string
          description: The location to move to
          example: 1e8asj
      required:
        - location
    CommandResponse:
      type: object
      properties:
        id:
          type: string
          example: 123e4567-e89b-12d3-a456-426614174000
          description: The id of the command
          x-order: 1
        type:
          $ref: '#/components/schemas/CommandType'
          description: The type of command
          x-order: 2
        status:
          $ref: '#/components/schemas/CommandStatus'
          description: The status of the command
          x-order: 3
        source:
          $ref: '#/components/schemas/CommandSource'
          description: The source of the command
          x-order: 4
        inputs:
          oneOf:
            - $ref: '#/components/schemas/CommandMoveToLocationInputs'
          description: The inputs of the command
          x-order: 5
        error:
          type: string
          nullable: true
          description: The error of the command
          x-order: 6
        createdAt:
          type: string
          format: date-time
          description: The creation date of the command
          x-order: 7
        completedAt:
          type: string
          nullable: true
          format: date-time
          description: The completion date of the command
          x-order: 8
      required:
        - id
        - type
        - status
        - source
        - inputs
        - error
        - createdAt
        - completedAt
    CommandListResponse:
      type: object
      properties:
        totalItems:
          type: integer
          description: The total number of commands
          example: 100
        items:
          type: array
          items:
            $ref: '#/components/schemas/CommandResponse'
          description: The list of commands
          x-order: 2
      required:
        - totalItems
        - items
  parameters:
    Page:
      name: page
      in: query
      schema:
        type: integer
        format: uint
        minimum: 1
        default: 1
      description: The page number
      required: false
    PageSize:
      name: pageSize
      in: query
      schema:
        type: integer
        format: uint
        minimum: 1
        default: 10
      description: The number of items per page
      required: false
