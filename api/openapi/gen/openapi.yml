openapi: 3.0.0
info:
  version: 0.1.0
  title: Raybot API
  description: The Raybot API
  license:
    url: https://opensource.org/licenses/MIT
    name: MIT
servers:
  - url: /api/v1
security: []
paths:
  /system/config:
    get:
      summary: Get system configuration
      operationId: getSystemConfig
      description: Get the system configuration
      tags:
        - system
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemConfigResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      summary: Update system configuration
      operationId: updateSystemConfig
      description: Update the system configuration
      tags:
        - system
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SystemConfigRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemConfigResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /system/restart:
    post:
      summary: Restart the application
      operationId: restartApplication
      description: Restart the application after 3 seconds.
      tags:
        - system
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /health:
    get:
      summary: Get health status
      operationId: getHealth
      description: Get the health status.
      tags:
        - health
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /robot-state:
    get:
      summary: Get robot state
      operationId: getRobotState
      description: Get the current state of the robot
      tags:
        - robot-state
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RobotStateResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
components:
  schemas:
    LogConfig:
      type: object
      properties:
        level:
          type: string
          enum:
            - debug
            - info
            - warn
            - error
          example: debug
          description: The log level for the gRPC server
          x-order: 1
          x-go-type: string
        format:
          type: string
          enum:
            - json
            - text
          example: json
          description: The log format for the gRPC server
          x-order: 2
          x-go-type: string
        addSource:
          type: boolean
          example: false
          description: Whether to add the source to the log
          x-order: 3
      required:
        - level
        - format
        - addSource
    GRPCConfig:
      type: object
      properties:
        port:
          type: integer
          example: 50051
          description: The port number for the gRPC server
          x-order: 1
      required:
        - port
    HTTPConfig:
      type: object
      properties:
        enableSwagger:
          type: boolean
          example: true
          description: Whether to enable the Swagger UI
          x-order: 1
      required:
        - enableSwagger
    SerialConfig:
      type: object
      properties:
        port:
          type: string
          example: /dev/ttyUSB0
          description: The port name for the serial connection
          x-order: 1
        baudRate:
          type: integer
          example: 9600
          description: The baud rate for the serial connection
          x-order: 2
        dataBits:
          type: integer
          example: 8
          description: The data bits for the serial connection
          x-order: 3
        stopBits:
          type: number
          format: double
          example: 1
          description: The stop bits for the serial connection
          x-order: 4
          x-go-type: float64
        parity:
          type: string
          enum:
            - none
            - even
            - odd
          example: none
          description: The parity for the serial connection
          x-order: 5
          x-go-type: string
        readTimeout:
          type: number
          format: double
          example: 1
          description: The read timeout for the serial connection
          x-order: 6
          x-go-type: float64
      required:
        - port
        - baudRate
        - dataBits
        - stopBits
        - parity
        - readTimeout
    PicConfig:
      type: object
      properties:
        serial:
          $ref: '#/components/schemas/SerialConfig'
      required:
        - serial
    SystemConfigResponse:
      type: object
      properties:
        log:
          $ref: '#/components/schemas/LogConfig'
        grpc:
          $ref: '#/components/schemas/GRPCConfig'
        http:
          $ref: '#/components/schemas/HTTPConfig'
        pic:
          $ref: '#/components/schemas/PicConfig'
      required:
        - log
        - grpc
        - http
        - pic
    FieldError:
      type: object
      properties:
        field:
          type: string
          description: field name
          example: name
          x-order: 1
        message:
          type: string
          description: error message
          example: Name is required
          x-order: 2
      required:
        - field
        - message
    ErrorResponse:
      type: object
      properties:
        code:
          type: string
          description: custom raybot error code
          example: item.NotFound
          x-order: 1
        message:
          type: string
          description: custom raybot error message
          example: Item not found
          x-order: 2
        details:
          type: array
          items:
            $ref: '#/components/schemas/FieldError'
          x-order: 3
      required:
        - code
        - message
    SystemConfigRequest:
      type: object
      properties:
        log:
          $ref: '#/components/schemas/LogConfig'
        grpc:
          $ref: '#/components/schemas/GRPCConfig'
        http:
          $ref: '#/components/schemas/HTTPConfig'
        pic:
          $ref: '#/components/schemas/PicConfig'
      required:
        - log
        - grpc
        - http
        - pic
    HealthResponse:
      type: object
      properties:
        status:
          type: string
          example: ok
          description: The health status
          x-order: 1
      required:
        - status
    BatteryState:
      type: object
      properties:
        current:
          type: integer
          example: 100
          description: The current of the battery
          x-order: 1
          x-go-type: uint16
        temp:
          type: integer
          example: 25
          description: The temperature of the battery
          x-order: 2
          x-go-type: uint8
        voltage:
          type: integer
          example: 120
          description: The voltage of the battery
          x-order: 3
          x-go-type: uint16
        cellVoltages:
          type: array
          items:
            type: integer
          example:
            - 12
            - 12
            - 12
            - 12
          description: The cell voltages of the battery
          x-order: 4
          x-go-type: '[]uint16'
        percent:
          type: integer
          example: 50
          description: The percentage of the battery
          x-order: 5
          x-go-type: uint8
        fault:
          type: integer
          example: 0
          description: The fault of the battery
          x-order: 6
          x-go-type: uint8
        health:
          type: integer
          example: 100
          description: The health of the battery
          x-order: 7
          x-go-type: uint8
        updatedAt:
          type: string
          format: date-time
          example: '2021-01-01T00:00:00Z'
          description: The updated at time of the battery
          x-order: 8
      required:
        - current
        - temp
        - voltage
        - cellVoltages
        - percent
        - fault
        - health
        - updatedAt
    ChargeState:
      type: object
      properties:
        currentLimit:
          type: integer
          example: 100
          description: The current limit of the charge
          x-order: 1
          x-go-type: uint16
        enabled:
          type: boolean
          example: true
          description: Whether the charge is enabled
          x-order: 2
        updatedAt:
          type: string
          format: date-time
          example: '2021-01-01T00:00:00Z'
          description: The updated at time of the charge
          x-order: 3
      required:
        - currentLimit
        - enabled
        - updatedAt
    DischargeState:
      type: object
      properties:
        currentLimit:
          type: integer
          example: 100
          description: The current limit of the discharge
          x-order: 1
          x-go-type: uint16
        enabled:
          type: boolean
          example: true
          description: Whether the discharge is enabled
          x-order: 2
        updatedAt:
          type: string
          format: date-time
          example: '2021-01-01T00:00:00Z'
          description: The updated at time of the discharge
          x-order: 3
      required:
        - currentLimit
        - enabled
        - updatedAt
    DistanceSensorState:
      type: object
      properties:
        frontDistance:
          type: integer
          example: 100
          description: The front distance of the distance sensor
          x-order: 1
          x-go-type: uint16
        backDistance:
          type: integer
          example: 100
          description: The back distance of the distance sensor
          x-order: 2
          x-go-type: uint16
        downDistance:
          type: integer
          example: 100
          description: The down distance of the distance sensor
          x-order: 3
          x-go-type: uint16
        updatedAt:
          type: string
          format: date-time
          example: '2021-01-01T00:00:00Z'
          description: The updated at time of the distance sensor
          x-order: 4
      required:
        - frontDistance
        - backDistance
        - downDistance
        - updatedAt
    LiftMotorState:
      type: object
      properties:
        currentPosition:
          type: integer
          example: 100
          description: The current position of the lift motor
          x-order: 1
          x-go-type: uint16
        targetPosition:
          type: integer
          example: 100
          description: The target position of the lift motor
          x-order: 2
          x-go-type: uint16
        isRunning:
          type: boolean
          example: true
          description: Whether the lift motor is running
          x-order: 3
        enabled:
          type: boolean
          example: true
          description: Whether the lift motor is enabled
          x-order: 4
        updatedAt:
          type: string
          format: date-time
          example: '2021-01-01T00:00:00Z'
          description: The updated at time of the lift motor
          x-order: 5
      required:
        - currentPosition
        - targetPosition
        - isRunning
        - enabled
        - updatedAt
    DriveMotorState:
      type: object
      properties:
        direction:
          type: string
          enum:
            - FORWARD
            - BACKWARD
          example: FORWARD
          description: The direction of the drive motor
          x-order: 1
          x-go-type: string
        speed:
          type: integer
          example: 100
          description: The speed of the drive motor (0-100)
          x-order: 2
          x-go-type: uint8
        isRunning:
          type: boolean
          example: true
          description: Whether the drive motor is running
          x-order: 3
        enabled:
          type: boolean
          example: true
          description: Whether the drive motor is enabled
          x-order: 4
        updatedAt:
          type: string
          format: date-time
          example: '2021-01-01T00:00:00Z'
          description: The updated at time of the drive motor
          x-order: 5
      required:
        - direction
        - speed
        - isRunning
        - enabled
        - updatedAt
    LocationState:
      type: object
      properties:
        currentLocation:
          type: string
          example: ABCxyz
          description: The current location of the robot
          x-order: 1
        updatedAt:
          type: string
          format: date-time
          example: '2021-01-01T00:00:00Z'
          description: The updated at time of the location
          x-order: 2
      required:
        - currentLocation
        - updatedAt
    RobotStateResponse:
      type: object
      properties:
        battery:
          $ref: '#/components/schemas/BatteryState'
        charge:
          $ref: '#/components/schemas/ChargeState'
        discharge:
          $ref: '#/components/schemas/DischargeState'
        distanceSensor:
          $ref: '#/components/schemas/DistanceSensorState'
        liftMotor:
          $ref: '#/components/schemas/LiftMotorState'
        driveMotor:
          $ref: '#/components/schemas/DriveMotorState'
        location:
          $ref: '#/components/schemas/LocationState'
      required:
        - battery
        - charge
        - discharge
        - distanceSensor
        - liftMotor
        - driveMotor
        - location
